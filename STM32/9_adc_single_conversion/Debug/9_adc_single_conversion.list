
9_adc_single_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000124  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f0  08000124  08000124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800145c  0800145c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800145c  0800145c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800145c  0800145c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800145c  0800145c  0001145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001460  08001460  00011460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080014c0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080014c0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001180  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006b0  00000000  00000000  00021248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  000218f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000129  00000000  00000000  00021ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f605  00000000  00000000  00021bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002245  00000000  00000000  000311de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00050626  00000000  00000000  00033423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ccc  00000000  00000000  00083a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00084718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000124 <__do_global_dtors_aux>:
 8000124:	b510      	push	{r4, lr}
 8000126:	4c05      	ldr	r4, [pc, #20]	; (800013c <__do_global_dtors_aux+0x18>)
 8000128:	7823      	ldrb	r3, [r4, #0]
 800012a:	b933      	cbnz	r3, 800013a <__do_global_dtors_aux+0x16>
 800012c:	4b04      	ldr	r3, [pc, #16]	; (8000140 <__do_global_dtors_aux+0x1c>)
 800012e:	b113      	cbz	r3, 8000136 <__do_global_dtors_aux+0x12>
 8000130:	4804      	ldr	r0, [pc, #16]	; (8000144 <__do_global_dtors_aux+0x20>)
 8000132:	f3af 8000 	nop.w
 8000136:	2301      	movs	r3, #1
 8000138:	7023      	strb	r3, [r4, #0]
 800013a:	bd10      	pop	{r4, pc}
 800013c:	2000005c 	.word	0x2000005c
 8000140:	00000000 	.word	0x00000000
 8000144:	080013fc 	.word	0x080013fc

08000148 <frame_dummy>:
 8000148:	b508      	push	{r3, lr}
 800014a:	4b03      	ldr	r3, [pc, #12]	; (8000158 <frame_dummy+0x10>)
 800014c:	b11b      	cbz	r3, 8000156 <frame_dummy+0xe>
 800014e:	4903      	ldr	r1, [pc, #12]	; (800015c <frame_dummy+0x14>)
 8000150:	4803      	ldr	r0, [pc, #12]	; (8000160 <frame_dummy+0x18>)
 8000152:	f3af 8000 	nop.w
 8000156:	bd08      	pop	{r3, pc}
 8000158:	00000000 	.word	0x00000000
 800015c:	20000060 	.word	0x20000060
 8000160:	080013fc 	.word	0x080013fc

08000164 <pa1_adc_init>:
#define CR2_ADON		(1U<<0)
#define CR2_SWSTART 	(1U<<30)
#define SR_EOC			(1U<<1)

void pa1_adc_init()
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	/*** Configure ADC pin ***/
	/* Enable clock access to GPIOA */
	RCC->AHBENR |= GPIOAEN;
 8000168:	4b13      	ldr	r3, [pc, #76]	; (80001b8 <pa1_adc_init+0x54>)
 800016a:	69db      	ldr	r3, [r3, #28]
 800016c:	4a12      	ldr	r2, [pc, #72]	; (80001b8 <pa1_adc_init+0x54>)
 800016e:	f043 0301 	orr.w	r3, r3, #1
 8000172:	61d3      	str	r3, [r2, #28]
	/* Set mode of PA1 to analog in mode register */
	GPIOA->MODER |= (1U<<2);
 8000174:	4b11      	ldr	r3, [pc, #68]	; (80001bc <pa1_adc_init+0x58>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a10      	ldr	r2, [pc, #64]	; (80001bc <pa1_adc_init+0x58>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 8000180:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <pa1_adc_init+0x58>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <pa1_adc_init+0x58>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]

	/*** Configure ADC Peripheral ***/
	/* Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <pa1_adc_init+0x54>)
 800018e:	6a1b      	ldr	r3, [r3, #32]
 8000190:	4a09      	ldr	r2, [pc, #36]	; (80001b8 <pa1_adc_init+0x54>)
 8000192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000196:	6213      	str	r3, [r2, #32]

	/** Configure ADC parameters **/
	/* Conversion sequence start */
	ADC1->SQR5 = ADC_CH1;
 8000198:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <pa1_adc_init+0x5c>)
 800019a:	2201      	movs	r2, #1
 800019c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Conversion sequence length */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <pa1_adc_init+0x5c>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	631a      	str	r2, [r3, #48]	; 0x30

	/* Enable ADC Module */
	ADC1->CR2 |= CR2_ADON;
 80001a4:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <pa1_adc_init+0x5c>)
 80001a6:	689b      	ldr	r3, [r3, #8]
 80001a8:	4a05      	ldr	r2, [pc, #20]	; (80001c0 <pa1_adc_init+0x5c>)
 80001aa:	f043 0301 	orr.w	r3, r3, #1
 80001ae:	6093      	str	r3, [r2, #8]
}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	40023800 	.word	0x40023800
 80001bc:	40020000 	.word	0x40020000
 80001c0:	40012400 	.word	0x40012400

080001c4 <start_conversion>:


void start_conversion(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	/* Start adc conversion */
	ADC1->CR2 |= CR2_SWSTART;
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <start_conversion+0x18>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <start_conversion+0x18>)
 80001ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80001d2:	6093      	str	r3, [r2, #8]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40012400 	.word	0x40012400

080001e0 <adc_read>:

uint32_t adc_read(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	/* Wait for conversion to finish */
	while(!(ADC1->SR & SR_EOC)){}
 80001e4:	bf00      	nop
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <adc_read+0x20>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <adc_read+0x6>

	/* Read converted result */
	return ADC1->DR;
 80001f2:	4b03      	ldr	r3, [pc, #12]	; (8000200 <adc_read+0x20>)
 80001f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40012400 	.word	0x40012400

08000204 <main>:
#include "adc.h"


uint32_t sensor_value;
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	// STM32L152RE restarts to approximately 2MHz
	// Need to step this up to 16MHz
	clock_step_up_to_16M();
 8000208:	f000 f830 	bl	800026c <clock_step_up_to_16M>

	uart2_tx_init();
 800020c:	f000 f908 	bl	8000420 <uart2_tx_init>

	pa1_adc_init();
 8000210:	f7ff ffa8 	bl	8000164 <pa1_adc_init>

	while(1)
	{
		sensor_value = adc_read();
 8000214:	f7ff ffe4 	bl	80001e0 <adc_read>
 8000218:	4603      	mov	r3, r0
 800021a:	4a05      	ldr	r2, [pc, #20]	; (8000230 <main+0x2c>)
 800021c:	6013      	str	r3, [r2, #0]
		start_conversion();
 800021e:	f7ff ffd1 	bl	80001c4 <start_conversion>

		printf("Sensor value %d\r\n", (int)sensor_value);
 8000222:	4b03      	ldr	r3, [pc, #12]	; (8000230 <main+0x2c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4619      	mov	r1, r3
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <main+0x30>)
 800022a:	f000 fa69 	bl	8000700 <iprintf>
		sensor_value = adc_read();
 800022e:	e7f1      	b.n	8000214 <main+0x10>
 8000230:	20000078 	.word	0x20000078
 8000234:	08001414 	.word	0x08001414

08000238 <clock_step_up_to_4M>:

void clock_step_up_to_4M();


void clock_step_up_to_4M()
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	RCC->ICSCR |= (1U<<15);
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <clock_step_up_to_4M+0x30>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a09      	ldr	r2, [pc, #36]	; (8000268 <clock_step_up_to_4M+0x30>)
 8000242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000246:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= (1U<<14);
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <clock_step_up_to_4M+0x30>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <clock_step_up_to_4M+0x30>)
 800024e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000252:	6053      	str	r3, [r2, #4]
	RCC->ICSCR &= ~(1U<<13);
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <clock_step_up_to_4M+0x30>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	4a03      	ldr	r2, [pc, #12]	; (8000268 <clock_step_up_to_4M+0x30>)
 800025a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800025e:	6053      	str	r3, [r2, #4]
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	40023800 	.word	0x40023800

0800026c <clock_step_up_to_16M>:

void clock_step_up_to_16M()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
	clock_step_up_to_4M();
 8000272:	f7ff ffe1 	bl	8000238 <clock_step_up_to_4M>
	for(int i = 0; i<25; i++){}
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e002      	b.n	8000282 <clock_step_up_to_16M+0x16>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b18      	cmp	r3, #24
 8000286:	ddf9      	ble.n	800027c <clock_step_up_to_16M+0x10>

	RCC->CR |= (1U<<0);
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <clock_step_up_to_16M+0x58>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <clock_step_up_to_16M+0x58>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1U<<1))){}
 8000294:	bf00      	nop
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <clock_step_up_to_16M+0x58>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f003 0302 	and.w	r3, r3, #2
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f9      	beq.n	8000296 <clock_step_up_to_16M+0x2a>

	RCC->CFGR &= ~(1U<<1);
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <clock_step_up_to_16M+0x58>)
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <clock_step_up_to_16M+0x58>)
 80002a8:	f023 0302 	bic.w	r3, r3, #2
 80002ac:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (1U<<0);
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <clock_step_up_to_16M+0x58>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <clock_step_up_to_16M+0x58>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6093      	str	r3, [r2, #8]
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800

080002c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002da:	f3af 8000 	nop.w
 80002de:	4601      	mov	r1, r0
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	60ba      	str	r2, [r7, #8]
 80002e6:	b2ca      	uxtb	r2, r1
 80002e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	697a      	ldr	r2, [r7, #20]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <_read+0x12>
  }

  return len;
 80002f8:	687b      	ldr	r3, [r7, #4]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b086      	sub	sp, #24
 8000306:	af00      	add	r7, sp, #0
 8000308:	60f8      	str	r0, [r7, #12]
 800030a:	60b9      	str	r1, [r7, #8]
 800030c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	e009      	b.n	8000328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	60ba      	str	r2, [r7, #8]
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f873 	bl	8000408 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	3301      	adds	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697a      	ldr	r2, [r7, #20]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	dbf1      	blt.n	8000314 <_write+0x12>
  }
  return len;
 8000330:	687b      	ldr	r3, [r7, #4]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <_close>:

int _close(int file)
{
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000360:	605a      	str	r2, [r3, #4]
  return 0;
 8000362:	2300      	movs	r3, #0
}
 8000364:	4618      	mov	r0, r3
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <_isatty>:

int _isatty(int file)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000382:	b480      	push	{r7}
 8000384:	b085      	sub	sp, #20
 8000386:	af00      	add	r7, sp, #0
 8000388:	60f8      	str	r0, [r7, #12]
 800038a:	60b9      	str	r1, [r7, #8]
 800038c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
	...

0800039c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <_sbrk+0x5c>)
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <_sbrk+0x60>)
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <_sbrk+0x64>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <_sbrk+0x64>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <_sbrk+0x68>)
 80003bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <_sbrk+0x64>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	693a      	ldr	r2, [r7, #16]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d207      	bcs.n	80003dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003cc:	f000 fa3c 	bl	8000848 <__errno>
 80003d0:	4603      	mov	r3, r0
 80003d2:	220c      	movs	r2, #12
 80003d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003da:	e009      	b.n	80003f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <_sbrk+0x64>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <_sbrk+0x64>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	4a05      	ldr	r2, [pc, #20]	; (8000400 <_sbrk+0x64>)
 80003ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003ee:	68fb      	ldr	r3, [r7, #12]
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20014000 	.word	0x20014000
 80003fc:	00000400 	.word	0x00000400
 8000400:	2000007c 	.word	0x2000007c
 8000404:	200001d0 	.word	0x200001d0

08000408 <__io_putchar>:

void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f000 f851 	bl	80004b8 <uart2_write>
	return(ch);
 8000416:	687b      	ldr	r3, [r7, #4]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <uart2_tx_init>:
	/* Enable uart module */
	USART2->CR1 |= CR1_UE;
}

void uart2_tx_init()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	/********* Configure uart GPIO tx pin *********/
	/* Enable clock access to GPIOA */
	RCC->AHBENR |= GPIOAEN;
 8000424:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <uart2_tx_init+0x88>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4a1f      	ldr	r2, [pc, #124]	; (80004a8 <uart2_tx_init+0x88>)
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	61d3      	str	r3, [r2, #28]

	/* Set PA2 mode to alternate function mode */
	GPIOA->MODER &= ~(1U<<4);
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <uart2_tx_init+0x8c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a1d      	ldr	r2, [pc, #116]	; (80004ac <uart2_tx_init+0x8c>)
 8000436:	f023 0310 	bic.w	r3, r3, #16
 800043a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <uart2_tx_init+0x8c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a1a      	ldr	r2, [pc, #104]	; (80004ac <uart2_tx_init+0x8c>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6013      	str	r3, [r2, #0]

	/* Set PA2 alternate function type to UART_TX (AF07) */
	GPIOA->AFR[0] |= (1U<<8);
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <uart2_tx_init+0x8c>)
 800044a:	6a1b      	ldr	r3, [r3, #32]
 800044c:	4a17      	ldr	r2, [pc, #92]	; (80004ac <uart2_tx_init+0x8c>)
 800044e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000452:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <uart2_tx_init+0x8c>)
 8000456:	6a1b      	ldr	r3, [r3, #32]
 8000458:	4a14      	ldr	r2, [pc, #80]	; (80004ac <uart2_tx_init+0x8c>)
 800045a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800045e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <uart2_tx_init+0x8c>)
 8000462:	6a1b      	ldr	r3, [r3, #32]
 8000464:	4a11      	ldr	r2, [pc, #68]	; (80004ac <uart2_tx_init+0x8c>)
 8000466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <uart2_tx_init+0x8c>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <uart2_tx_init+0x8c>)
 8000472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000476:	6213      	str	r3, [r2, #32]

	/********* Configure uart module *********/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <uart2_tx_init+0x88>)
 800047a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800047c:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <uart2_tx_init+0x88>)
 800047e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000482:	6253      	str	r3, [r2, #36]	; 0x24

	/* Configure UART baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000488:	4909      	ldr	r1, [pc, #36]	; (80004b0 <uart2_tx_init+0x90>)
 800048a:	480a      	ldr	r0, [pc, #40]	; (80004b4 <uart2_tx_init+0x94>)
 800048c:	f000 f82a 	bl	80004e4 <uart_set_baudrate>

	/* Configure transfer direction */
	USART2->CR1 = CR1_TE;
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <uart2_tx_init+0x94>)
 8000492:	2208      	movs	r2, #8
 8000494:	60da      	str	r2, [r3, #12]

	/* Enable uart module */
	USART2->CR1 |= CR1_UE;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <uart2_tx_init+0x94>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <uart2_tx_init+0x94>)
 800049c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a0:	60d3      	str	r3, [r2, #12]
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020000 	.word	0x40020000
 80004b0:	00f42400 	.word	0x00f42400
 80004b4:	40004400 	.word	0x40004400

080004b8 <uart2_write>:

	return USART2->DR;
}

void uart2_write(int ch)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	/* Make sure TX data register is empty */
	while(!(USART2->SR & SR_TXE)){}
 80004c0:	bf00      	nop
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <uart2_write+0x28>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f9      	beq.n	80004c2 <uart2_write+0xa>
	/* Write to TX data register */
	USART2->DR	= (ch & 0xFF);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a03      	ldr	r2, [pc, #12]	; (80004e0 <uart2_write+0x28>)
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	6053      	str	r3, [r2, #4]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40004400 	.word	0x40004400

080004e4 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, baudRate);
 80004f0:	6879      	ldr	r1, [r7, #4]
 80004f2:	68b8      	ldr	r0, [r7, #8]
 80004f4:	f000 f808 	bl	8000508 <compute_uart_bd>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	609a      	str	r2, [r3, #8]
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return PeriphClk / baudRate;
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	b29b      	uxth	r3, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
	...

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	; (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	; (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 f97d 	bl	8000854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff fe53 	bl	8000204 <main>

0800055e <LoopForever>:

LoopForever:
  b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	20014000 	.word	0x20014000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800056c:	08001464 	.word	0x08001464
  ldr r2, =_sbss
 8000570:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000574:	200001cc 	.word	0x200001cc

08000578 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC1_IRQHandler>
	...

0800057c <std>:
 800057c:	2300      	movs	r3, #0
 800057e:	b510      	push	{r4, lr}
 8000580:	4604      	mov	r4, r0
 8000582:	e9c0 3300 	strd	r3, r3, [r0]
 8000586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800058a:	6083      	str	r3, [r0, #8]
 800058c:	8181      	strh	r1, [r0, #12]
 800058e:	6643      	str	r3, [r0, #100]	; 0x64
 8000590:	81c2      	strh	r2, [r0, #14]
 8000592:	6183      	str	r3, [r0, #24]
 8000594:	4619      	mov	r1, r3
 8000596:	2208      	movs	r2, #8
 8000598:	305c      	adds	r0, #92	; 0x5c
 800059a:	f000 f906 	bl	80007aa <memset>
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <std+0x58>)
 80005a0:	6224      	str	r4, [r4, #32]
 80005a2:	6263      	str	r3, [r4, #36]	; 0x24
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <std+0x5c>)
 80005a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <std+0x60>)
 80005aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <std+0x64>)
 80005ae:	6323      	str	r3, [r4, #48]	; 0x30
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <std+0x68>)
 80005b2:	429c      	cmp	r4, r3
 80005b4:	d006      	beq.n	80005c4 <std+0x48>
 80005b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80005ba:	4294      	cmp	r4, r2
 80005bc:	d002      	beq.n	80005c4 <std+0x48>
 80005be:	33d0      	adds	r3, #208	; 0xd0
 80005c0:	429c      	cmp	r4, r3
 80005c2:	d105      	bne.n	80005d0 <std+0x54>
 80005c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80005c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005cc:	f000 b966 	b.w	800089c <__retarget_lock_init_recursive>
 80005d0:	bd10      	pop	{r4, pc}
 80005d2:	bf00      	nop
 80005d4:	08000725 	.word	0x08000725
 80005d8:	08000747 	.word	0x08000747
 80005dc:	0800077f 	.word	0x0800077f
 80005e0:	080007a3 	.word	0x080007a3
 80005e4:	20000080 	.word	0x20000080

080005e8 <stdio_exit_handler>:
 80005e8:	4a02      	ldr	r2, [pc, #8]	; (80005f4 <stdio_exit_handler+0xc>)
 80005ea:	4903      	ldr	r1, [pc, #12]	; (80005f8 <stdio_exit_handler+0x10>)
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <stdio_exit_handler+0x14>)
 80005ee:	f000 b869 	b.w	80006c4 <_fwalk_sglue>
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	0800113d 	.word	0x0800113d
 80005fc:	2000000c 	.word	0x2000000c

08000600 <cleanup_stdio>:
 8000600:	6841      	ldr	r1, [r0, #4]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <cleanup_stdio+0x34>)
 8000604:	b510      	push	{r4, lr}
 8000606:	4299      	cmp	r1, r3
 8000608:	4604      	mov	r4, r0
 800060a:	d001      	beq.n	8000610 <cleanup_stdio+0x10>
 800060c:	f000 fd96 	bl	800113c <_fflush_r>
 8000610:	68a1      	ldr	r1, [r4, #8]
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <cleanup_stdio+0x38>)
 8000614:	4299      	cmp	r1, r3
 8000616:	d002      	beq.n	800061e <cleanup_stdio+0x1e>
 8000618:	4620      	mov	r0, r4
 800061a:	f000 fd8f 	bl	800113c <_fflush_r>
 800061e:	68e1      	ldr	r1, [r4, #12]
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <cleanup_stdio+0x3c>)
 8000622:	4299      	cmp	r1, r3
 8000624:	d004      	beq.n	8000630 <cleanup_stdio+0x30>
 8000626:	4620      	mov	r0, r4
 8000628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800062c:	f000 bd86 	b.w	800113c <_fflush_r>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	20000080 	.word	0x20000080
 8000638:	200000e8 	.word	0x200000e8
 800063c:	20000150 	.word	0x20000150

08000640 <global_stdio_init.part.0>:
 8000640:	b510      	push	{r4, lr}
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <global_stdio_init.part.0+0x30>)
 8000644:	4c0b      	ldr	r4, [pc, #44]	; (8000674 <global_stdio_init.part.0+0x34>)
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <global_stdio_init.part.0+0x38>)
 8000648:	4620      	mov	r0, r4
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	2104      	movs	r1, #4
 800064e:	2200      	movs	r2, #0
 8000650:	f7ff ff94 	bl	800057c <std>
 8000654:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000658:	2201      	movs	r2, #1
 800065a:	2109      	movs	r1, #9
 800065c:	f7ff ff8e 	bl	800057c <std>
 8000660:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000664:	2202      	movs	r2, #2
 8000666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800066a:	2112      	movs	r1, #18
 800066c:	f7ff bf86 	b.w	800057c <std>
 8000670:	200001b8 	.word	0x200001b8
 8000674:	20000080 	.word	0x20000080
 8000678:	080005e9 	.word	0x080005e9

0800067c <__sfp_lock_acquire>:
 800067c:	4801      	ldr	r0, [pc, #4]	; (8000684 <__sfp_lock_acquire+0x8>)
 800067e:	f000 b90e 	b.w	800089e <__retarget_lock_acquire_recursive>
 8000682:	bf00      	nop
 8000684:	200001c1 	.word	0x200001c1

08000688 <__sfp_lock_release>:
 8000688:	4801      	ldr	r0, [pc, #4]	; (8000690 <__sfp_lock_release+0x8>)
 800068a:	f000 b909 	b.w	80008a0 <__retarget_lock_release_recursive>
 800068e:	bf00      	nop
 8000690:	200001c1 	.word	0x200001c1

08000694 <__sinit>:
 8000694:	b510      	push	{r4, lr}
 8000696:	4604      	mov	r4, r0
 8000698:	f7ff fff0 	bl	800067c <__sfp_lock_acquire>
 800069c:	6a23      	ldr	r3, [r4, #32]
 800069e:	b11b      	cbz	r3, 80006a8 <__sinit+0x14>
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a4:	f7ff bff0 	b.w	8000688 <__sfp_lock_release>
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <__sinit+0x28>)
 80006aa:	6223      	str	r3, [r4, #32]
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <__sinit+0x2c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f5      	bne.n	80006a0 <__sinit+0xc>
 80006b4:	f7ff ffc4 	bl	8000640 <global_stdio_init.part.0>
 80006b8:	e7f2      	b.n	80006a0 <__sinit+0xc>
 80006ba:	bf00      	nop
 80006bc:	08000601 	.word	0x08000601
 80006c0:	200001b8 	.word	0x200001b8

080006c4 <_fwalk_sglue>:
 80006c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006c8:	4607      	mov	r7, r0
 80006ca:	4688      	mov	r8, r1
 80006cc:	4614      	mov	r4, r2
 80006ce:	2600      	movs	r6, #0
 80006d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006d4:	f1b9 0901 	subs.w	r9, r9, #1
 80006d8:	d505      	bpl.n	80006e6 <_fwalk_sglue+0x22>
 80006da:	6824      	ldr	r4, [r4, #0]
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d1f7      	bne.n	80006d0 <_fwalk_sglue+0xc>
 80006e0:	4630      	mov	r0, r6
 80006e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006e6:	89ab      	ldrh	r3, [r5, #12]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d907      	bls.n	80006fc <_fwalk_sglue+0x38>
 80006ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006f0:	3301      	adds	r3, #1
 80006f2:	d003      	beq.n	80006fc <_fwalk_sglue+0x38>
 80006f4:	4629      	mov	r1, r5
 80006f6:	4638      	mov	r0, r7
 80006f8:	47c0      	blx	r8
 80006fa:	4306      	orrs	r6, r0
 80006fc:	3568      	adds	r5, #104	; 0x68
 80006fe:	e7e9      	b.n	80006d4 <_fwalk_sglue+0x10>

08000700 <iprintf>:
 8000700:	b40f      	push	{r0, r1, r2, r3}
 8000702:	b507      	push	{r0, r1, r2, lr}
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <iprintf+0x20>)
 8000706:	ab04      	add	r3, sp, #16
 8000708:	6808      	ldr	r0, [r1, #0]
 800070a:	f853 2b04 	ldr.w	r2, [r3], #4
 800070e:	6881      	ldr	r1, [r0, #8]
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	f000 f9e3 	bl	8000adc <_vfiprintf_r>
 8000716:	b003      	add	sp, #12
 8000718:	f85d eb04 	ldr.w	lr, [sp], #4
 800071c:	b004      	add	sp, #16
 800071e:	4770      	bx	lr
 8000720:	20000058 	.word	0x20000058

08000724 <__sread>:
 8000724:	b510      	push	{r4, lr}
 8000726:	460c      	mov	r4, r1
 8000728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800072c:	f000 f868 	bl	8000800 <_read_r>
 8000730:	2800      	cmp	r0, #0
 8000732:	bfab      	itete	ge
 8000734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000736:	89a3      	ldrhlt	r3, [r4, #12]
 8000738:	181b      	addge	r3, r3, r0
 800073a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800073e:	bfac      	ite	ge
 8000740:	6563      	strge	r3, [r4, #84]	; 0x54
 8000742:	81a3      	strhlt	r3, [r4, #12]
 8000744:	bd10      	pop	{r4, pc}

08000746 <__swrite>:
 8000746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800074a:	461f      	mov	r7, r3
 800074c:	898b      	ldrh	r3, [r1, #12]
 800074e:	4605      	mov	r5, r0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	460c      	mov	r4, r1
 8000754:	4616      	mov	r6, r2
 8000756:	d505      	bpl.n	8000764 <__swrite+0x1e>
 8000758:	2302      	movs	r3, #2
 800075a:	2200      	movs	r2, #0
 800075c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000760:	f000 f83c 	bl	80007dc <_lseek_r>
 8000764:	89a3      	ldrh	r3, [r4, #12]
 8000766:	4632      	mov	r2, r6
 8000768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800076c:	81a3      	strh	r3, [r4, #12]
 800076e:	4628      	mov	r0, r5
 8000770:	463b      	mov	r3, r7
 8000772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800077a:	f000 b853 	b.w	8000824 <_write_r>

0800077e <__sseek>:
 800077e:	b510      	push	{r4, lr}
 8000780:	460c      	mov	r4, r1
 8000782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000786:	f000 f829 	bl	80007dc <_lseek_r>
 800078a:	1c43      	adds	r3, r0, #1
 800078c:	89a3      	ldrh	r3, [r4, #12]
 800078e:	bf15      	itete	ne
 8000790:	6560      	strne	r0, [r4, #84]	; 0x54
 8000792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800079a:	81a3      	strheq	r3, [r4, #12]
 800079c:	bf18      	it	ne
 800079e:	81a3      	strhne	r3, [r4, #12]
 80007a0:	bd10      	pop	{r4, pc}

080007a2 <__sclose>:
 80007a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007a6:	f000 b809 	b.w	80007bc <_close_r>

080007aa <memset>:
 80007aa:	4603      	mov	r3, r0
 80007ac:	4402      	add	r2, r0
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d100      	bne.n	80007b4 <memset+0xa>
 80007b2:	4770      	bx	lr
 80007b4:	f803 1b01 	strb.w	r1, [r3], #1
 80007b8:	e7f9      	b.n	80007ae <memset+0x4>
	...

080007bc <_close_r>:
 80007bc:	b538      	push	{r3, r4, r5, lr}
 80007be:	2300      	movs	r3, #0
 80007c0:	4d05      	ldr	r5, [pc, #20]	; (80007d8 <_close_r+0x1c>)
 80007c2:	4604      	mov	r4, r0
 80007c4:	4608      	mov	r0, r1
 80007c6:	602b      	str	r3, [r5, #0]
 80007c8:	f7ff fdb7 	bl	800033a <_close>
 80007cc:	1c43      	adds	r3, r0, #1
 80007ce:	d102      	bne.n	80007d6 <_close_r+0x1a>
 80007d0:	682b      	ldr	r3, [r5, #0]
 80007d2:	b103      	cbz	r3, 80007d6 <_close_r+0x1a>
 80007d4:	6023      	str	r3, [r4, #0]
 80007d6:	bd38      	pop	{r3, r4, r5, pc}
 80007d8:	200001bc 	.word	0x200001bc

080007dc <_lseek_r>:
 80007dc:	b538      	push	{r3, r4, r5, lr}
 80007de:	4604      	mov	r4, r0
 80007e0:	4608      	mov	r0, r1
 80007e2:	4611      	mov	r1, r2
 80007e4:	2200      	movs	r2, #0
 80007e6:	4d05      	ldr	r5, [pc, #20]	; (80007fc <_lseek_r+0x20>)
 80007e8:	602a      	str	r2, [r5, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	f7ff fdc9 	bl	8000382 <_lseek>
 80007f0:	1c43      	adds	r3, r0, #1
 80007f2:	d102      	bne.n	80007fa <_lseek_r+0x1e>
 80007f4:	682b      	ldr	r3, [r5, #0]
 80007f6:	b103      	cbz	r3, 80007fa <_lseek_r+0x1e>
 80007f8:	6023      	str	r3, [r4, #0]
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
 80007fc:	200001bc 	.word	0x200001bc

08000800 <_read_r>:
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	2200      	movs	r2, #0
 800080a:	4d05      	ldr	r5, [pc, #20]	; (8000820 <_read_r+0x20>)
 800080c:	602a      	str	r2, [r5, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	f7ff fd5a 	bl	80002c8 <_read>
 8000814:	1c43      	adds	r3, r0, #1
 8000816:	d102      	bne.n	800081e <_read_r+0x1e>
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	b103      	cbz	r3, 800081e <_read_r+0x1e>
 800081c:	6023      	str	r3, [r4, #0]
 800081e:	bd38      	pop	{r3, r4, r5, pc}
 8000820:	200001bc 	.word	0x200001bc

08000824 <_write_r>:
 8000824:	b538      	push	{r3, r4, r5, lr}
 8000826:	4604      	mov	r4, r0
 8000828:	4608      	mov	r0, r1
 800082a:	4611      	mov	r1, r2
 800082c:	2200      	movs	r2, #0
 800082e:	4d05      	ldr	r5, [pc, #20]	; (8000844 <_write_r+0x20>)
 8000830:	602a      	str	r2, [r5, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	f7ff fd65 	bl	8000302 <_write>
 8000838:	1c43      	adds	r3, r0, #1
 800083a:	d102      	bne.n	8000842 <_write_r+0x1e>
 800083c:	682b      	ldr	r3, [r5, #0]
 800083e:	b103      	cbz	r3, 8000842 <_write_r+0x1e>
 8000840:	6023      	str	r3, [r4, #0]
 8000842:	bd38      	pop	{r3, r4, r5, pc}
 8000844:	200001bc 	.word	0x200001bc

08000848 <__errno>:
 8000848:	4b01      	ldr	r3, [pc, #4]	; (8000850 <__errno+0x8>)
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000058 	.word	0x20000058

08000854 <__libc_init_array>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	2600      	movs	r6, #0
 8000858:	4d0c      	ldr	r5, [pc, #48]	; (800088c <__libc_init_array+0x38>)
 800085a:	4c0d      	ldr	r4, [pc, #52]	; (8000890 <__libc_init_array+0x3c>)
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	10a4      	asrs	r4, r4, #2
 8000860:	42a6      	cmp	r6, r4
 8000862:	d109      	bne.n	8000878 <__libc_init_array+0x24>
 8000864:	f000 fdca 	bl	80013fc <_init>
 8000868:	2600      	movs	r6, #0
 800086a:	4d0a      	ldr	r5, [pc, #40]	; (8000894 <__libc_init_array+0x40>)
 800086c:	4c0a      	ldr	r4, [pc, #40]	; (8000898 <__libc_init_array+0x44>)
 800086e:	1b64      	subs	r4, r4, r5
 8000870:	10a4      	asrs	r4, r4, #2
 8000872:	42a6      	cmp	r6, r4
 8000874:	d105      	bne.n	8000882 <__libc_init_array+0x2e>
 8000876:	bd70      	pop	{r4, r5, r6, pc}
 8000878:	f855 3b04 	ldr.w	r3, [r5], #4
 800087c:	4798      	blx	r3
 800087e:	3601      	adds	r6, #1
 8000880:	e7ee      	b.n	8000860 <__libc_init_array+0xc>
 8000882:	f855 3b04 	ldr.w	r3, [r5], #4
 8000886:	4798      	blx	r3
 8000888:	3601      	adds	r6, #1
 800088a:	e7f2      	b.n	8000872 <__libc_init_array+0x1e>
 800088c:	0800145c 	.word	0x0800145c
 8000890:	0800145c 	.word	0x0800145c
 8000894:	0800145c 	.word	0x0800145c
 8000898:	08001460 	.word	0x08001460

0800089c <__retarget_lock_init_recursive>:
 800089c:	4770      	bx	lr

0800089e <__retarget_lock_acquire_recursive>:
 800089e:	4770      	bx	lr

080008a0 <__retarget_lock_release_recursive>:
 80008a0:	4770      	bx	lr
	...

080008a4 <_free_r>:
 80008a4:	b538      	push	{r3, r4, r5, lr}
 80008a6:	4605      	mov	r5, r0
 80008a8:	2900      	cmp	r1, #0
 80008aa:	d040      	beq.n	800092e <_free_r+0x8a>
 80008ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008b0:	1f0c      	subs	r4, r1, #4
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bfb8      	it	lt
 80008b6:	18e4      	addlt	r4, r4, r3
 80008b8:	f000 f8dc 	bl	8000a74 <__malloc_lock>
 80008bc:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <_free_r+0x8c>)
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	b933      	cbnz	r3, 80008d0 <_free_r+0x2c>
 80008c2:	6063      	str	r3, [r4, #4]
 80008c4:	6014      	str	r4, [r2, #0]
 80008c6:	4628      	mov	r0, r5
 80008c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008cc:	f000 b8d8 	b.w	8000a80 <__malloc_unlock>
 80008d0:	42a3      	cmp	r3, r4
 80008d2:	d908      	bls.n	80008e6 <_free_r+0x42>
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	1821      	adds	r1, r4, r0
 80008d8:	428b      	cmp	r3, r1
 80008da:	bf01      	itttt	eq
 80008dc:	6819      	ldreq	r1, [r3, #0]
 80008de:	685b      	ldreq	r3, [r3, #4]
 80008e0:	1809      	addeq	r1, r1, r0
 80008e2:	6021      	streq	r1, [r4, #0]
 80008e4:	e7ed      	b.n	80008c2 <_free_r+0x1e>
 80008e6:	461a      	mov	r2, r3
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	b10b      	cbz	r3, 80008f0 <_free_r+0x4c>
 80008ec:	42a3      	cmp	r3, r4
 80008ee:	d9fa      	bls.n	80008e6 <_free_r+0x42>
 80008f0:	6811      	ldr	r1, [r2, #0]
 80008f2:	1850      	adds	r0, r2, r1
 80008f4:	42a0      	cmp	r0, r4
 80008f6:	d10b      	bne.n	8000910 <_free_r+0x6c>
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	4401      	add	r1, r0
 80008fc:	1850      	adds	r0, r2, r1
 80008fe:	4283      	cmp	r3, r0
 8000900:	6011      	str	r1, [r2, #0]
 8000902:	d1e0      	bne.n	80008c6 <_free_r+0x22>
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	4408      	add	r0, r1
 800090a:	6010      	str	r0, [r2, #0]
 800090c:	6053      	str	r3, [r2, #4]
 800090e:	e7da      	b.n	80008c6 <_free_r+0x22>
 8000910:	d902      	bls.n	8000918 <_free_r+0x74>
 8000912:	230c      	movs	r3, #12
 8000914:	602b      	str	r3, [r5, #0]
 8000916:	e7d6      	b.n	80008c6 <_free_r+0x22>
 8000918:	6820      	ldr	r0, [r4, #0]
 800091a:	1821      	adds	r1, r4, r0
 800091c:	428b      	cmp	r3, r1
 800091e:	bf01      	itttt	eq
 8000920:	6819      	ldreq	r1, [r3, #0]
 8000922:	685b      	ldreq	r3, [r3, #4]
 8000924:	1809      	addeq	r1, r1, r0
 8000926:	6021      	streq	r1, [r4, #0]
 8000928:	6063      	str	r3, [r4, #4]
 800092a:	6054      	str	r4, [r2, #4]
 800092c:	e7cb      	b.n	80008c6 <_free_r+0x22>
 800092e:	bd38      	pop	{r3, r4, r5, pc}
 8000930:	200001c4 	.word	0x200001c4

08000934 <sbrk_aligned>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	4e0e      	ldr	r6, [pc, #56]	; (8000970 <sbrk_aligned+0x3c>)
 8000938:	460c      	mov	r4, r1
 800093a:	6831      	ldr	r1, [r6, #0]
 800093c:	4605      	mov	r5, r0
 800093e:	b911      	cbnz	r1, 8000946 <sbrk_aligned+0x12>
 8000940:	f000 fcba 	bl	80012b8 <_sbrk_r>
 8000944:	6030      	str	r0, [r6, #0]
 8000946:	4621      	mov	r1, r4
 8000948:	4628      	mov	r0, r5
 800094a:	f000 fcb5 	bl	80012b8 <_sbrk_r>
 800094e:	1c43      	adds	r3, r0, #1
 8000950:	d00a      	beq.n	8000968 <sbrk_aligned+0x34>
 8000952:	1cc4      	adds	r4, r0, #3
 8000954:	f024 0403 	bic.w	r4, r4, #3
 8000958:	42a0      	cmp	r0, r4
 800095a:	d007      	beq.n	800096c <sbrk_aligned+0x38>
 800095c:	1a21      	subs	r1, r4, r0
 800095e:	4628      	mov	r0, r5
 8000960:	f000 fcaa 	bl	80012b8 <_sbrk_r>
 8000964:	3001      	adds	r0, #1
 8000966:	d101      	bne.n	800096c <sbrk_aligned+0x38>
 8000968:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800096c:	4620      	mov	r0, r4
 800096e:	bd70      	pop	{r4, r5, r6, pc}
 8000970:	200001c8 	.word	0x200001c8

08000974 <_malloc_r>:
 8000974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000978:	1ccd      	adds	r5, r1, #3
 800097a:	f025 0503 	bic.w	r5, r5, #3
 800097e:	3508      	adds	r5, #8
 8000980:	2d0c      	cmp	r5, #12
 8000982:	bf38      	it	cc
 8000984:	250c      	movcc	r5, #12
 8000986:	2d00      	cmp	r5, #0
 8000988:	4607      	mov	r7, r0
 800098a:	db01      	blt.n	8000990 <_malloc_r+0x1c>
 800098c:	42a9      	cmp	r1, r5
 800098e:	d905      	bls.n	800099c <_malloc_r+0x28>
 8000990:	230c      	movs	r3, #12
 8000992:	2600      	movs	r6, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4630      	mov	r0, r6
 8000998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800099c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a70 <_malloc_r+0xfc>
 80009a0:	f000 f868 	bl	8000a74 <__malloc_lock>
 80009a4:	f8d8 3000 	ldr.w	r3, [r8]
 80009a8:	461c      	mov	r4, r3
 80009aa:	bb5c      	cbnz	r4, 8000a04 <_malloc_r+0x90>
 80009ac:	4629      	mov	r1, r5
 80009ae:	4638      	mov	r0, r7
 80009b0:	f7ff ffc0 	bl	8000934 <sbrk_aligned>
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	4604      	mov	r4, r0
 80009b8:	d155      	bne.n	8000a66 <_malloc_r+0xf2>
 80009ba:	f8d8 4000 	ldr.w	r4, [r8]
 80009be:	4626      	mov	r6, r4
 80009c0:	2e00      	cmp	r6, #0
 80009c2:	d145      	bne.n	8000a50 <_malloc_r+0xdc>
 80009c4:	2c00      	cmp	r4, #0
 80009c6:	d048      	beq.n	8000a5a <_malloc_r+0xe6>
 80009c8:	6823      	ldr	r3, [r4, #0]
 80009ca:	4631      	mov	r1, r6
 80009cc:	4638      	mov	r0, r7
 80009ce:	eb04 0903 	add.w	r9, r4, r3
 80009d2:	f000 fc71 	bl	80012b8 <_sbrk_r>
 80009d6:	4581      	cmp	r9, r0
 80009d8:	d13f      	bne.n	8000a5a <_malloc_r+0xe6>
 80009da:	6821      	ldr	r1, [r4, #0]
 80009dc:	4638      	mov	r0, r7
 80009de:	1a6d      	subs	r5, r5, r1
 80009e0:	4629      	mov	r1, r5
 80009e2:	f7ff ffa7 	bl	8000934 <sbrk_aligned>
 80009e6:	3001      	adds	r0, #1
 80009e8:	d037      	beq.n	8000a5a <_malloc_r+0xe6>
 80009ea:	6823      	ldr	r3, [r4, #0]
 80009ec:	442b      	add	r3, r5
 80009ee:	6023      	str	r3, [r4, #0]
 80009f0:	f8d8 3000 	ldr.w	r3, [r8]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d038      	beq.n	8000a6a <_malloc_r+0xf6>
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	42a2      	cmp	r2, r4
 80009fc:	d12b      	bne.n	8000a56 <_malloc_r+0xe2>
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	e00f      	b.n	8000a24 <_malloc_r+0xb0>
 8000a04:	6822      	ldr	r2, [r4, #0]
 8000a06:	1b52      	subs	r2, r2, r5
 8000a08:	d41f      	bmi.n	8000a4a <_malloc_r+0xd6>
 8000a0a:	2a0b      	cmp	r2, #11
 8000a0c:	d917      	bls.n	8000a3e <_malloc_r+0xca>
 8000a0e:	1961      	adds	r1, r4, r5
 8000a10:	42a3      	cmp	r3, r4
 8000a12:	6025      	str	r5, [r4, #0]
 8000a14:	bf18      	it	ne
 8000a16:	6059      	strne	r1, [r3, #4]
 8000a18:	6863      	ldr	r3, [r4, #4]
 8000a1a:	bf08      	it	eq
 8000a1c:	f8c8 1000 	streq.w	r1, [r8]
 8000a20:	5162      	str	r2, [r4, r5]
 8000a22:	604b      	str	r3, [r1, #4]
 8000a24:	4638      	mov	r0, r7
 8000a26:	f104 060b 	add.w	r6, r4, #11
 8000a2a:	f000 f829 	bl	8000a80 <__malloc_unlock>
 8000a2e:	f026 0607 	bic.w	r6, r6, #7
 8000a32:	1d23      	adds	r3, r4, #4
 8000a34:	1af2      	subs	r2, r6, r3
 8000a36:	d0ae      	beq.n	8000996 <_malloc_r+0x22>
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	50a3      	str	r3, [r4, r2]
 8000a3c:	e7ab      	b.n	8000996 <_malloc_r+0x22>
 8000a3e:	42a3      	cmp	r3, r4
 8000a40:	6862      	ldr	r2, [r4, #4]
 8000a42:	d1dd      	bne.n	8000a00 <_malloc_r+0x8c>
 8000a44:	f8c8 2000 	str.w	r2, [r8]
 8000a48:	e7ec      	b.n	8000a24 <_malloc_r+0xb0>
 8000a4a:	4623      	mov	r3, r4
 8000a4c:	6864      	ldr	r4, [r4, #4]
 8000a4e:	e7ac      	b.n	80009aa <_malloc_r+0x36>
 8000a50:	4634      	mov	r4, r6
 8000a52:	6876      	ldr	r6, [r6, #4]
 8000a54:	e7b4      	b.n	80009c0 <_malloc_r+0x4c>
 8000a56:	4613      	mov	r3, r2
 8000a58:	e7cc      	b.n	80009f4 <_malloc_r+0x80>
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	4638      	mov	r0, r7
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	f000 f80e 	bl	8000a80 <__malloc_unlock>
 8000a64:	e797      	b.n	8000996 <_malloc_r+0x22>
 8000a66:	6025      	str	r5, [r4, #0]
 8000a68:	e7dc      	b.n	8000a24 <_malloc_r+0xb0>
 8000a6a:	605b      	str	r3, [r3, #4]
 8000a6c:	deff      	udf	#255	; 0xff
 8000a6e:	bf00      	nop
 8000a70:	200001c4 	.word	0x200001c4

08000a74 <__malloc_lock>:
 8000a74:	4801      	ldr	r0, [pc, #4]	; (8000a7c <__malloc_lock+0x8>)
 8000a76:	f7ff bf12 	b.w	800089e <__retarget_lock_acquire_recursive>
 8000a7a:	bf00      	nop
 8000a7c:	200001c0 	.word	0x200001c0

08000a80 <__malloc_unlock>:
 8000a80:	4801      	ldr	r0, [pc, #4]	; (8000a88 <__malloc_unlock+0x8>)
 8000a82:	f7ff bf0d 	b.w	80008a0 <__retarget_lock_release_recursive>
 8000a86:	bf00      	nop
 8000a88:	200001c0 	.word	0x200001c0

08000a8c <__sfputc_r>:
 8000a8c:	6893      	ldr	r3, [r2, #8]
 8000a8e:	b410      	push	{r4}
 8000a90:	3b01      	subs	r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	6093      	str	r3, [r2, #8]
 8000a96:	da07      	bge.n	8000aa8 <__sfputc_r+0x1c>
 8000a98:	6994      	ldr	r4, [r2, #24]
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	db01      	blt.n	8000aa2 <__sfputc_r+0x16>
 8000a9e:	290a      	cmp	r1, #10
 8000aa0:	d102      	bne.n	8000aa8 <__sfputc_r+0x1c>
 8000aa2:	bc10      	pop	{r4}
 8000aa4:	f000 bb72 	b.w	800118c <__swbuf_r>
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	1c58      	adds	r0, r3, #1
 8000aac:	6010      	str	r0, [r2, #0]
 8000aae:	7019      	strb	r1, [r3, #0]
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	bc10      	pop	{r4}
 8000ab4:	4770      	bx	lr

08000ab6 <__sfputs_r>:
 8000ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab8:	4606      	mov	r6, r0
 8000aba:	460f      	mov	r7, r1
 8000abc:	4614      	mov	r4, r2
 8000abe:	18d5      	adds	r5, r2, r3
 8000ac0:	42ac      	cmp	r4, r5
 8000ac2:	d101      	bne.n	8000ac8 <__sfputs_r+0x12>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e007      	b.n	8000ad8 <__sfputs_r+0x22>
 8000ac8:	463a      	mov	r2, r7
 8000aca:	4630      	mov	r0, r6
 8000acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ad0:	f7ff ffdc 	bl	8000a8c <__sfputc_r>
 8000ad4:	1c43      	adds	r3, r0, #1
 8000ad6:	d1f3      	bne.n	8000ac0 <__sfputs_r+0xa>
 8000ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000adc <_vfiprintf_r>:
 8000adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae0:	460d      	mov	r5, r1
 8000ae2:	4614      	mov	r4, r2
 8000ae4:	4698      	mov	r8, r3
 8000ae6:	4606      	mov	r6, r0
 8000ae8:	b09d      	sub	sp, #116	; 0x74
 8000aea:	b118      	cbz	r0, 8000af4 <_vfiprintf_r+0x18>
 8000aec:	6a03      	ldr	r3, [r0, #32]
 8000aee:	b90b      	cbnz	r3, 8000af4 <_vfiprintf_r+0x18>
 8000af0:	f7ff fdd0 	bl	8000694 <__sinit>
 8000af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000af6:	07d9      	lsls	r1, r3, #31
 8000af8:	d405      	bmi.n	8000b06 <_vfiprintf_r+0x2a>
 8000afa:	89ab      	ldrh	r3, [r5, #12]
 8000afc:	059a      	lsls	r2, r3, #22
 8000afe:	d402      	bmi.n	8000b06 <_vfiprintf_r+0x2a>
 8000b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b02:	f7ff fecc 	bl	800089e <__retarget_lock_acquire_recursive>
 8000b06:	89ab      	ldrh	r3, [r5, #12]
 8000b08:	071b      	lsls	r3, r3, #28
 8000b0a:	d501      	bpl.n	8000b10 <_vfiprintf_r+0x34>
 8000b0c:	692b      	ldr	r3, [r5, #16]
 8000b0e:	b99b      	cbnz	r3, 8000b38 <_vfiprintf_r+0x5c>
 8000b10:	4629      	mov	r1, r5
 8000b12:	4630      	mov	r0, r6
 8000b14:	f000 fb78 	bl	8001208 <__swsetup_r>
 8000b18:	b170      	cbz	r0, 8000b38 <_vfiprintf_r+0x5c>
 8000b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b1c:	07dc      	lsls	r4, r3, #31
 8000b1e:	d504      	bpl.n	8000b2a <_vfiprintf_r+0x4e>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	b01d      	add	sp, #116	; 0x74
 8000b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2a:	89ab      	ldrh	r3, [r5, #12]
 8000b2c:	0598      	lsls	r0, r3, #22
 8000b2e:	d4f7      	bmi.n	8000b20 <_vfiprintf_r+0x44>
 8000b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b32:	f7ff feb5 	bl	80008a0 <__retarget_lock_release_recursive>
 8000b36:	e7f3      	b.n	8000b20 <_vfiprintf_r+0x44>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b42:	2330      	movs	r3, #48	; 0x30
 8000b44:	f04f 0901 	mov.w	r9, #1
 8000b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000cfc <_vfiprintf_r+0x220>
 8000b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b54:	4623      	mov	r3, r4
 8000b56:	469a      	mov	sl, r3
 8000b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b5c:	b10a      	cbz	r2, 8000b62 <_vfiprintf_r+0x86>
 8000b5e:	2a25      	cmp	r2, #37	; 0x25
 8000b60:	d1f9      	bne.n	8000b56 <_vfiprintf_r+0x7a>
 8000b62:	ebba 0b04 	subs.w	fp, sl, r4
 8000b66:	d00b      	beq.n	8000b80 <_vfiprintf_r+0xa4>
 8000b68:	465b      	mov	r3, fp
 8000b6a:	4622      	mov	r2, r4
 8000b6c:	4629      	mov	r1, r5
 8000b6e:	4630      	mov	r0, r6
 8000b70:	f7ff ffa1 	bl	8000ab6 <__sfputs_r>
 8000b74:	3001      	adds	r0, #1
 8000b76:	f000 80a9 	beq.w	8000ccc <_vfiprintf_r+0x1f0>
 8000b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b7c:	445a      	add	r2, fp
 8000b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8000b80:	f89a 3000 	ldrb.w	r3, [sl]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f000 80a1 	beq.w	8000ccc <_vfiprintf_r+0x1f0>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b94:	f10a 0a01 	add.w	sl, sl, #1
 8000b98:	9304      	str	r3, [sp, #16]
 8000b9a:	9307      	str	r3, [sp, #28]
 8000b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8000ba2:	4654      	mov	r4, sl
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000baa:	4854      	ldr	r0, [pc, #336]	; (8000cfc <_vfiprintf_r+0x220>)
 8000bac:	f000 fb94 	bl	80012d8 <memchr>
 8000bb0:	9a04      	ldr	r2, [sp, #16]
 8000bb2:	b9d8      	cbnz	r0, 8000bec <_vfiprintf_r+0x110>
 8000bb4:	06d1      	lsls	r1, r2, #27
 8000bb6:	bf44      	itt	mi
 8000bb8:	2320      	movmi	r3, #32
 8000bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bbe:	0713      	lsls	r3, r2, #28
 8000bc0:	bf44      	itt	mi
 8000bc2:	232b      	movmi	r3, #43	; 0x2b
 8000bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8000bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8000bce:	d015      	beq.n	8000bfc <_vfiprintf_r+0x120>
 8000bd0:	4654      	mov	r4, sl
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f04f 0c0a 	mov.w	ip, #10
 8000bd8:	9a07      	ldr	r2, [sp, #28]
 8000bda:	4621      	mov	r1, r4
 8000bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000be0:	3b30      	subs	r3, #48	; 0x30
 8000be2:	2b09      	cmp	r3, #9
 8000be4:	d94d      	bls.n	8000c82 <_vfiprintf_r+0x1a6>
 8000be6:	b1b0      	cbz	r0, 8000c16 <_vfiprintf_r+0x13a>
 8000be8:	9207      	str	r2, [sp, #28]
 8000bea:	e014      	b.n	8000c16 <_vfiprintf_r+0x13a>
 8000bec:	eba0 0308 	sub.w	r3, r0, r8
 8000bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	46a2      	mov	sl, r4
 8000bf8:	9304      	str	r3, [sp, #16]
 8000bfa:	e7d2      	b.n	8000ba2 <_vfiprintf_r+0xc6>
 8000bfc:	9b03      	ldr	r3, [sp, #12]
 8000bfe:	1d19      	adds	r1, r3, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	9103      	str	r1, [sp, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	bfbb      	ittet	lt
 8000c08:	425b      	neglt	r3, r3
 8000c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8000c0e:	9307      	strge	r3, [sp, #28]
 8000c10:	9307      	strlt	r3, [sp, #28]
 8000c12:	bfb8      	it	lt
 8000c14:	9204      	strlt	r2, [sp, #16]
 8000c16:	7823      	ldrb	r3, [r4, #0]
 8000c18:	2b2e      	cmp	r3, #46	; 0x2e
 8000c1a:	d10c      	bne.n	8000c36 <_vfiprintf_r+0x15a>
 8000c1c:	7863      	ldrb	r3, [r4, #1]
 8000c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8000c20:	d134      	bne.n	8000c8c <_vfiprintf_r+0x1b0>
 8000c22:	9b03      	ldr	r3, [sp, #12]
 8000c24:	3402      	adds	r4, #2
 8000c26:	1d1a      	adds	r2, r3, #4
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	9203      	str	r2, [sp, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bfb8      	it	lt
 8000c30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000c34:	9305      	str	r3, [sp, #20]
 8000c36:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000d00 <_vfiprintf_r+0x224>
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	4650      	mov	r0, sl
 8000c3e:	7821      	ldrb	r1, [r4, #0]
 8000c40:	f000 fb4a 	bl	80012d8 <memchr>
 8000c44:	b138      	cbz	r0, 8000c56 <_vfiprintf_r+0x17a>
 8000c46:	2240      	movs	r2, #64	; 0x40
 8000c48:	9b04      	ldr	r3, [sp, #16]
 8000c4a:	eba0 000a 	sub.w	r0, r0, sl
 8000c4e:	4082      	lsls	r2, r0
 8000c50:	4313      	orrs	r3, r2
 8000c52:	3401      	adds	r4, #1
 8000c54:	9304      	str	r3, [sp, #16]
 8000c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	4829      	ldr	r0, [pc, #164]	; (8000d04 <_vfiprintf_r+0x228>)
 8000c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c62:	f000 fb39 	bl	80012d8 <memchr>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d03f      	beq.n	8000cea <_vfiprintf_r+0x20e>
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <_vfiprintf_r+0x22c>)
 8000c6c:	bb1b      	cbnz	r3, 8000cb6 <_vfiprintf_r+0x1da>
 8000c6e:	9b03      	ldr	r3, [sp, #12]
 8000c70:	3307      	adds	r3, #7
 8000c72:	f023 0307 	bic.w	r3, r3, #7
 8000c76:	3308      	adds	r3, #8
 8000c78:	9303      	str	r3, [sp, #12]
 8000c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c7c:	443b      	add	r3, r7
 8000c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c80:	e768      	b.n	8000b54 <_vfiprintf_r+0x78>
 8000c82:	460c      	mov	r4, r1
 8000c84:	2001      	movs	r0, #1
 8000c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c8a:	e7a6      	b.n	8000bda <_vfiprintf_r+0xfe>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f04f 0c0a 	mov.w	ip, #10
 8000c92:	4619      	mov	r1, r3
 8000c94:	3401      	adds	r4, #1
 8000c96:	9305      	str	r3, [sp, #20]
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c9e:	3a30      	subs	r2, #48	; 0x30
 8000ca0:	2a09      	cmp	r2, #9
 8000ca2:	d903      	bls.n	8000cac <_vfiprintf_r+0x1d0>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0c6      	beq.n	8000c36 <_vfiprintf_r+0x15a>
 8000ca8:	9105      	str	r1, [sp, #20]
 8000caa:	e7c4      	b.n	8000c36 <_vfiprintf_r+0x15a>
 8000cac:	4604      	mov	r4, r0
 8000cae:	2301      	movs	r3, #1
 8000cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cb4:	e7f0      	b.n	8000c98 <_vfiprintf_r+0x1bc>
 8000cb6:	ab03      	add	r3, sp, #12
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	462a      	mov	r2, r5
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_vfiprintf_r+0x230>)
 8000cc0:	a904      	add	r1, sp, #16
 8000cc2:	f3af 8000 	nop.w
 8000cc6:	4607      	mov	r7, r0
 8000cc8:	1c78      	adds	r0, r7, #1
 8000cca:	d1d6      	bne.n	8000c7a <_vfiprintf_r+0x19e>
 8000ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cce:	07d9      	lsls	r1, r3, #31
 8000cd0:	d405      	bmi.n	8000cde <_vfiprintf_r+0x202>
 8000cd2:	89ab      	ldrh	r3, [r5, #12]
 8000cd4:	059a      	lsls	r2, r3, #22
 8000cd6:	d402      	bmi.n	8000cde <_vfiprintf_r+0x202>
 8000cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cda:	f7ff fde1 	bl	80008a0 <__retarget_lock_release_recursive>
 8000cde:	89ab      	ldrh	r3, [r5, #12]
 8000ce0:	065b      	lsls	r3, r3, #25
 8000ce2:	f53f af1d 	bmi.w	8000b20 <_vfiprintf_r+0x44>
 8000ce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ce8:	e71c      	b.n	8000b24 <_vfiprintf_r+0x48>
 8000cea:	ab03      	add	r3, sp, #12
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	462a      	mov	r2, r5
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <_vfiprintf_r+0x230>)
 8000cf4:	a904      	add	r1, sp, #16
 8000cf6:	f000 f87d 	bl	8000df4 <_printf_i>
 8000cfa:	e7e4      	b.n	8000cc6 <_vfiprintf_r+0x1ea>
 8000cfc:	08001426 	.word	0x08001426
 8000d00:	0800142c 	.word	0x0800142c
 8000d04:	08001430 	.word	0x08001430
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	08000ab7 	.word	0x08000ab7

08000d10 <_printf_common>:
 8000d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d14:	4616      	mov	r6, r2
 8000d16:	4699      	mov	r9, r3
 8000d18:	688a      	ldr	r2, [r1, #8]
 8000d1a:	690b      	ldr	r3, [r1, #16]
 8000d1c:	4607      	mov	r7, r0
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	bfb8      	it	lt
 8000d22:	4613      	movlt	r3, r2
 8000d24:	6033      	str	r3, [r6, #0]
 8000d26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d30:	b10a      	cbz	r2, 8000d36 <_printf_common+0x26>
 8000d32:	3301      	adds	r3, #1
 8000d34:	6033      	str	r3, [r6, #0]
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	0699      	lsls	r1, r3, #26
 8000d3a:	bf42      	ittt	mi
 8000d3c:	6833      	ldrmi	r3, [r6, #0]
 8000d3e:	3302      	addmi	r3, #2
 8000d40:	6033      	strmi	r3, [r6, #0]
 8000d42:	6825      	ldr	r5, [r4, #0]
 8000d44:	f015 0506 	ands.w	r5, r5, #6
 8000d48:	d106      	bne.n	8000d58 <_printf_common+0x48>
 8000d4a:	f104 0a19 	add.w	sl, r4, #25
 8000d4e:	68e3      	ldr	r3, [r4, #12]
 8000d50:	6832      	ldr	r2, [r6, #0]
 8000d52:	1a9b      	subs	r3, r3, r2
 8000d54:	42ab      	cmp	r3, r5
 8000d56:	dc2b      	bgt.n	8000db0 <_printf_common+0xa0>
 8000d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d5c:	1e13      	subs	r3, r2, #0
 8000d5e:	6822      	ldr	r2, [r4, #0]
 8000d60:	bf18      	it	ne
 8000d62:	2301      	movne	r3, #1
 8000d64:	0692      	lsls	r2, r2, #26
 8000d66:	d430      	bmi.n	8000dca <_printf_common+0xba>
 8000d68:	4649      	mov	r1, r9
 8000d6a:	4638      	mov	r0, r7
 8000d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d70:	47c0      	blx	r8
 8000d72:	3001      	adds	r0, #1
 8000d74:	d023      	beq.n	8000dbe <_printf_common+0xae>
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	6922      	ldr	r2, [r4, #16]
 8000d7a:	f003 0306 	and.w	r3, r3, #6
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf14      	ite	ne
 8000d82:	2500      	movne	r5, #0
 8000d84:	6833      	ldreq	r3, [r6, #0]
 8000d86:	f04f 0600 	mov.w	r6, #0
 8000d8a:	bf08      	it	eq
 8000d8c:	68e5      	ldreq	r5, [r4, #12]
 8000d8e:	f104 041a 	add.w	r4, r4, #26
 8000d92:	bf08      	it	eq
 8000d94:	1aed      	subeq	r5, r5, r3
 8000d96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000d9a:	bf08      	it	eq
 8000d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000da0:	4293      	cmp	r3, r2
 8000da2:	bfc4      	itt	gt
 8000da4:	1a9b      	subgt	r3, r3, r2
 8000da6:	18ed      	addgt	r5, r5, r3
 8000da8:	42b5      	cmp	r5, r6
 8000daa:	d11a      	bne.n	8000de2 <_printf_common+0xd2>
 8000dac:	2000      	movs	r0, #0
 8000dae:	e008      	b.n	8000dc2 <_printf_common+0xb2>
 8000db0:	2301      	movs	r3, #1
 8000db2:	4652      	mov	r2, sl
 8000db4:	4649      	mov	r1, r9
 8000db6:	4638      	mov	r0, r7
 8000db8:	47c0      	blx	r8
 8000dba:	3001      	adds	r0, #1
 8000dbc:	d103      	bne.n	8000dc6 <_printf_common+0xb6>
 8000dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	3501      	adds	r5, #1
 8000dc8:	e7c1      	b.n	8000d4e <_printf_common+0x3e>
 8000dca:	2030      	movs	r0, #48	; 0x30
 8000dcc:	18e1      	adds	r1, r4, r3
 8000dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dd8:	4422      	add	r2, r4
 8000dda:	3302      	adds	r3, #2
 8000ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000de0:	e7c2      	b.n	8000d68 <_printf_common+0x58>
 8000de2:	2301      	movs	r3, #1
 8000de4:	4622      	mov	r2, r4
 8000de6:	4649      	mov	r1, r9
 8000de8:	4638      	mov	r0, r7
 8000dea:	47c0      	blx	r8
 8000dec:	3001      	adds	r0, #1
 8000dee:	d0e6      	beq.n	8000dbe <_printf_common+0xae>
 8000df0:	3601      	adds	r6, #1
 8000df2:	e7d9      	b.n	8000da8 <_printf_common+0x98>

08000df4 <_printf_i>:
 8000df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	7e0f      	ldrb	r7, [r1, #24]
 8000dfa:	4691      	mov	r9, r2
 8000dfc:	2f78      	cmp	r7, #120	; 0x78
 8000dfe:	4680      	mov	r8, r0
 8000e00:	460c      	mov	r4, r1
 8000e02:	469a      	mov	sl, r3
 8000e04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e0a:	d807      	bhi.n	8000e1c <_printf_i+0x28>
 8000e0c:	2f62      	cmp	r7, #98	; 0x62
 8000e0e:	d80a      	bhi.n	8000e26 <_printf_i+0x32>
 8000e10:	2f00      	cmp	r7, #0
 8000e12:	f000 80d5 	beq.w	8000fc0 <_printf_i+0x1cc>
 8000e16:	2f58      	cmp	r7, #88	; 0x58
 8000e18:	f000 80c1 	beq.w	8000f9e <_printf_i+0x1aa>
 8000e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e24:	e03a      	b.n	8000e9c <_printf_i+0xa8>
 8000e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e2a:	2b15      	cmp	r3, #21
 8000e2c:	d8f6      	bhi.n	8000e1c <_printf_i+0x28>
 8000e2e:	a101      	add	r1, pc, #4	; (adr r1, 8000e34 <_printf_i+0x40>)
 8000e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e34:	08000e8d 	.word	0x08000e8d
 8000e38:	08000ea1 	.word	0x08000ea1
 8000e3c:	08000e1d 	.word	0x08000e1d
 8000e40:	08000e1d 	.word	0x08000e1d
 8000e44:	08000e1d 	.word	0x08000e1d
 8000e48:	08000e1d 	.word	0x08000e1d
 8000e4c:	08000ea1 	.word	0x08000ea1
 8000e50:	08000e1d 	.word	0x08000e1d
 8000e54:	08000e1d 	.word	0x08000e1d
 8000e58:	08000e1d 	.word	0x08000e1d
 8000e5c:	08000e1d 	.word	0x08000e1d
 8000e60:	08000fa7 	.word	0x08000fa7
 8000e64:	08000ecd 	.word	0x08000ecd
 8000e68:	08000f61 	.word	0x08000f61
 8000e6c:	08000e1d 	.word	0x08000e1d
 8000e70:	08000e1d 	.word	0x08000e1d
 8000e74:	08000fc9 	.word	0x08000fc9
 8000e78:	08000e1d 	.word	0x08000e1d
 8000e7c:	08000ecd 	.word	0x08000ecd
 8000e80:	08000e1d 	.word	0x08000e1d
 8000e84:	08000e1d 	.word	0x08000e1d
 8000e88:	08000f69 	.word	0x08000f69
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	1d1a      	adds	r2, r3, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	602a      	str	r2, [r5, #0]
 8000e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e0a0      	b.n	8000fe2 <_printf_i+0x1ee>
 8000ea0:	6820      	ldr	r0, [r4, #0]
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	0607      	lsls	r7, r0, #24
 8000ea6:	f103 0104 	add.w	r1, r3, #4
 8000eaa:	6029      	str	r1, [r5, #0]
 8000eac:	d501      	bpl.n	8000eb2 <_printf_i+0xbe>
 8000eae:	681e      	ldr	r6, [r3, #0]
 8000eb0:	e003      	b.n	8000eba <_printf_i+0xc6>
 8000eb2:	0646      	lsls	r6, r0, #25
 8000eb4:	d5fb      	bpl.n	8000eae <_printf_i+0xba>
 8000eb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	da03      	bge.n	8000ec6 <_printf_i+0xd2>
 8000ebe:	232d      	movs	r3, #45	; 0x2d
 8000ec0:	4276      	negs	r6, r6
 8000ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	4859      	ldr	r0, [pc, #356]	; (8001030 <_printf_i+0x23c>)
 8000eca:	e012      	b.n	8000ef2 <_printf_i+0xfe>
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	6820      	ldr	r0, [r4, #0]
 8000ed0:	1d19      	adds	r1, r3, #4
 8000ed2:	6029      	str	r1, [r5, #0]
 8000ed4:	0605      	lsls	r5, r0, #24
 8000ed6:	d501      	bpl.n	8000edc <_printf_i+0xe8>
 8000ed8:	681e      	ldr	r6, [r3, #0]
 8000eda:	e002      	b.n	8000ee2 <_printf_i+0xee>
 8000edc:	0641      	lsls	r1, r0, #25
 8000ede:	d5fb      	bpl.n	8000ed8 <_printf_i+0xe4>
 8000ee0:	881e      	ldrh	r6, [r3, #0]
 8000ee2:	2f6f      	cmp	r7, #111	; 0x6f
 8000ee4:	bf0c      	ite	eq
 8000ee6:	2308      	moveq	r3, #8
 8000ee8:	230a      	movne	r3, #10
 8000eea:	4851      	ldr	r0, [pc, #324]	; (8001030 <_printf_i+0x23c>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ef2:	6865      	ldr	r5, [r4, #4]
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	bfa8      	it	ge
 8000ef8:	6821      	ldrge	r1, [r4, #0]
 8000efa:	60a5      	str	r5, [r4, #8]
 8000efc:	bfa4      	itt	ge
 8000efe:	f021 0104 	bicge.w	r1, r1, #4
 8000f02:	6021      	strge	r1, [r4, #0]
 8000f04:	b90e      	cbnz	r6, 8000f0a <_printf_i+0x116>
 8000f06:	2d00      	cmp	r5, #0
 8000f08:	d04b      	beq.n	8000fa2 <_printf_i+0x1ae>
 8000f0a:	4615      	mov	r5, r2
 8000f0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f10:	fb03 6711 	mls	r7, r3, r1, r6
 8000f14:	5dc7      	ldrb	r7, [r0, r7]
 8000f16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f1a:	4637      	mov	r7, r6
 8000f1c:	42bb      	cmp	r3, r7
 8000f1e:	460e      	mov	r6, r1
 8000f20:	d9f4      	bls.n	8000f0c <_printf_i+0x118>
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d10b      	bne.n	8000f3e <_printf_i+0x14a>
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	07de      	lsls	r6, r3, #31
 8000f2a:	d508      	bpl.n	8000f3e <_printf_i+0x14a>
 8000f2c:	6923      	ldr	r3, [r4, #16]
 8000f2e:	6861      	ldr	r1, [r4, #4]
 8000f30:	4299      	cmp	r1, r3
 8000f32:	bfde      	ittt	le
 8000f34:	2330      	movle	r3, #48	; 0x30
 8000f36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f3a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000f3e:	1b52      	subs	r2, r2, r5
 8000f40:	6122      	str	r2, [r4, #16]
 8000f42:	464b      	mov	r3, r9
 8000f44:	4621      	mov	r1, r4
 8000f46:	4640      	mov	r0, r8
 8000f48:	f8cd a000 	str.w	sl, [sp]
 8000f4c:	aa03      	add	r2, sp, #12
 8000f4e:	f7ff fedf 	bl	8000d10 <_printf_common>
 8000f52:	3001      	adds	r0, #1
 8000f54:	d14a      	bne.n	8000fec <_printf_i+0x1f8>
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f5a:	b004      	add	sp, #16
 8000f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	f043 0320 	orr.w	r3, r3, #32
 8000f66:	6023      	str	r3, [r4, #0]
 8000f68:	2778      	movs	r7, #120	; 0x78
 8000f6a:	4832      	ldr	r0, [pc, #200]	; (8001034 <_printf_i+0x240>)
 8000f6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	6829      	ldr	r1, [r5, #0]
 8000f74:	061f      	lsls	r7, r3, #24
 8000f76:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f7a:	d402      	bmi.n	8000f82 <_printf_i+0x18e>
 8000f7c:	065f      	lsls	r7, r3, #25
 8000f7e:	bf48      	it	mi
 8000f80:	b2b6      	uxthmi	r6, r6
 8000f82:	07df      	lsls	r7, r3, #31
 8000f84:	bf48      	it	mi
 8000f86:	f043 0320 	orrmi.w	r3, r3, #32
 8000f8a:	6029      	str	r1, [r5, #0]
 8000f8c:	bf48      	it	mi
 8000f8e:	6023      	strmi	r3, [r4, #0]
 8000f90:	b91e      	cbnz	r6, 8000f9a <_printf_i+0x1a6>
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	f023 0320 	bic.w	r3, r3, #32
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	e7a6      	b.n	8000eec <_printf_i+0xf8>
 8000f9e:	4824      	ldr	r0, [pc, #144]	; (8001030 <_printf_i+0x23c>)
 8000fa0:	e7e4      	b.n	8000f6c <_printf_i+0x178>
 8000fa2:	4615      	mov	r5, r2
 8000fa4:	e7bd      	b.n	8000f22 <_printf_i+0x12e>
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	6826      	ldr	r6, [r4, #0]
 8000faa:	1d18      	adds	r0, r3, #4
 8000fac:	6961      	ldr	r1, [r4, #20]
 8000fae:	6028      	str	r0, [r5, #0]
 8000fb0:	0635      	lsls	r5, r6, #24
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	d501      	bpl.n	8000fba <_printf_i+0x1c6>
 8000fb6:	6019      	str	r1, [r3, #0]
 8000fb8:	e002      	b.n	8000fc0 <_printf_i+0x1cc>
 8000fba:	0670      	lsls	r0, r6, #25
 8000fbc:	d5fb      	bpl.n	8000fb6 <_printf_i+0x1c2>
 8000fbe:	8019      	strh	r1, [r3, #0]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4615      	mov	r5, r2
 8000fc4:	6123      	str	r3, [r4, #16]
 8000fc6:	e7bc      	b.n	8000f42 <_printf_i+0x14e>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	2100      	movs	r1, #0
 8000fcc:	1d1a      	adds	r2, r3, #4
 8000fce:	602a      	str	r2, [r5, #0]
 8000fd0:	681d      	ldr	r5, [r3, #0]
 8000fd2:	6862      	ldr	r2, [r4, #4]
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f000 f97f 	bl	80012d8 <memchr>
 8000fda:	b108      	cbz	r0, 8000fe0 <_printf_i+0x1ec>
 8000fdc:	1b40      	subs	r0, r0, r5
 8000fde:	6060      	str	r0, [r4, #4]
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	6123      	str	r3, [r4, #16]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fea:	e7aa      	b.n	8000f42 <_printf_i+0x14e>
 8000fec:	462a      	mov	r2, r5
 8000fee:	4649      	mov	r1, r9
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	6923      	ldr	r3, [r4, #16]
 8000ff4:	47d0      	blx	sl
 8000ff6:	3001      	adds	r0, #1
 8000ff8:	d0ad      	beq.n	8000f56 <_printf_i+0x162>
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	079b      	lsls	r3, r3, #30
 8000ffe:	d413      	bmi.n	8001028 <_printf_i+0x234>
 8001000:	68e0      	ldr	r0, [r4, #12]
 8001002:	9b03      	ldr	r3, [sp, #12]
 8001004:	4298      	cmp	r0, r3
 8001006:	bfb8      	it	lt
 8001008:	4618      	movlt	r0, r3
 800100a:	e7a6      	b.n	8000f5a <_printf_i+0x166>
 800100c:	2301      	movs	r3, #1
 800100e:	4632      	mov	r2, r6
 8001010:	4649      	mov	r1, r9
 8001012:	4640      	mov	r0, r8
 8001014:	47d0      	blx	sl
 8001016:	3001      	adds	r0, #1
 8001018:	d09d      	beq.n	8000f56 <_printf_i+0x162>
 800101a:	3501      	adds	r5, #1
 800101c:	68e3      	ldr	r3, [r4, #12]
 800101e:	9903      	ldr	r1, [sp, #12]
 8001020:	1a5b      	subs	r3, r3, r1
 8001022:	42ab      	cmp	r3, r5
 8001024:	dcf2      	bgt.n	800100c <_printf_i+0x218>
 8001026:	e7eb      	b.n	8001000 <_printf_i+0x20c>
 8001028:	2500      	movs	r5, #0
 800102a:	f104 0619 	add.w	r6, r4, #25
 800102e:	e7f5      	b.n	800101c <_printf_i+0x228>
 8001030:	08001437 	.word	0x08001437
 8001034:	08001448 	.word	0x08001448

08001038 <__sflush_r>:
 8001038:	898a      	ldrh	r2, [r1, #12]
 800103a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103c:	4605      	mov	r5, r0
 800103e:	0710      	lsls	r0, r2, #28
 8001040:	460c      	mov	r4, r1
 8001042:	d457      	bmi.n	80010f4 <__sflush_r+0xbc>
 8001044:	684b      	ldr	r3, [r1, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dc04      	bgt.n	8001054 <__sflush_r+0x1c>
 800104a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800104c:	2b00      	cmp	r3, #0
 800104e:	dc01      	bgt.n	8001054 <__sflush_r+0x1c>
 8001050:	2000      	movs	r0, #0
 8001052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001056:	2e00      	cmp	r6, #0
 8001058:	d0fa      	beq.n	8001050 <__sflush_r+0x18>
 800105a:	2300      	movs	r3, #0
 800105c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001060:	682f      	ldr	r7, [r5, #0]
 8001062:	6a21      	ldr	r1, [r4, #32]
 8001064:	602b      	str	r3, [r5, #0]
 8001066:	d032      	beq.n	80010ce <__sflush_r+0x96>
 8001068:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800106a:	89a3      	ldrh	r3, [r4, #12]
 800106c:	075a      	lsls	r2, r3, #29
 800106e:	d505      	bpl.n	800107c <__sflush_r+0x44>
 8001070:	6863      	ldr	r3, [r4, #4]
 8001072:	1ac0      	subs	r0, r0, r3
 8001074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001076:	b10b      	cbz	r3, 800107c <__sflush_r+0x44>
 8001078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800107a:	1ac0      	subs	r0, r0, r3
 800107c:	2300      	movs	r3, #0
 800107e:	4602      	mov	r2, r0
 8001080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001082:	4628      	mov	r0, r5
 8001084:	6a21      	ldr	r1, [r4, #32]
 8001086:	47b0      	blx	r6
 8001088:	1c43      	adds	r3, r0, #1
 800108a:	89a3      	ldrh	r3, [r4, #12]
 800108c:	d106      	bne.n	800109c <__sflush_r+0x64>
 800108e:	6829      	ldr	r1, [r5, #0]
 8001090:	291d      	cmp	r1, #29
 8001092:	d82b      	bhi.n	80010ec <__sflush_r+0xb4>
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <__sflush_r+0x100>)
 8001096:	410a      	asrs	r2, r1
 8001098:	07d6      	lsls	r6, r2, #31
 800109a:	d427      	bmi.n	80010ec <__sflush_r+0xb4>
 800109c:	2200      	movs	r2, #0
 800109e:	6062      	str	r2, [r4, #4]
 80010a0:	6922      	ldr	r2, [r4, #16]
 80010a2:	04d9      	lsls	r1, r3, #19
 80010a4:	6022      	str	r2, [r4, #0]
 80010a6:	d504      	bpl.n	80010b2 <__sflush_r+0x7a>
 80010a8:	1c42      	adds	r2, r0, #1
 80010aa:	d101      	bne.n	80010b0 <__sflush_r+0x78>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b903      	cbnz	r3, 80010b2 <__sflush_r+0x7a>
 80010b0:	6560      	str	r0, [r4, #84]	; 0x54
 80010b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010b4:	602f      	str	r7, [r5, #0]
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d0ca      	beq.n	8001050 <__sflush_r+0x18>
 80010ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010be:	4299      	cmp	r1, r3
 80010c0:	d002      	beq.n	80010c8 <__sflush_r+0x90>
 80010c2:	4628      	mov	r0, r5
 80010c4:	f7ff fbee 	bl	80008a4 <_free_r>
 80010c8:	2000      	movs	r0, #0
 80010ca:	6360      	str	r0, [r4, #52]	; 0x34
 80010cc:	e7c1      	b.n	8001052 <__sflush_r+0x1a>
 80010ce:	2301      	movs	r3, #1
 80010d0:	4628      	mov	r0, r5
 80010d2:	47b0      	blx	r6
 80010d4:	1c41      	adds	r1, r0, #1
 80010d6:	d1c8      	bne.n	800106a <__sflush_r+0x32>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0c5      	beq.n	800106a <__sflush_r+0x32>
 80010de:	2b1d      	cmp	r3, #29
 80010e0:	d001      	beq.n	80010e6 <__sflush_r+0xae>
 80010e2:	2b16      	cmp	r3, #22
 80010e4:	d101      	bne.n	80010ea <__sflush_r+0xb2>
 80010e6:	602f      	str	r7, [r5, #0]
 80010e8:	e7b2      	b.n	8001050 <__sflush_r+0x18>
 80010ea:	89a3      	ldrh	r3, [r4, #12]
 80010ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f0:	81a3      	strh	r3, [r4, #12]
 80010f2:	e7ae      	b.n	8001052 <__sflush_r+0x1a>
 80010f4:	690f      	ldr	r7, [r1, #16]
 80010f6:	2f00      	cmp	r7, #0
 80010f8:	d0aa      	beq.n	8001050 <__sflush_r+0x18>
 80010fa:	0793      	lsls	r3, r2, #30
 80010fc:	bf18      	it	ne
 80010fe:	2300      	movne	r3, #0
 8001100:	680e      	ldr	r6, [r1, #0]
 8001102:	bf08      	it	eq
 8001104:	694b      	ldreq	r3, [r1, #20]
 8001106:	1bf6      	subs	r6, r6, r7
 8001108:	600f      	str	r7, [r1, #0]
 800110a:	608b      	str	r3, [r1, #8]
 800110c:	2e00      	cmp	r6, #0
 800110e:	dd9f      	ble.n	8001050 <__sflush_r+0x18>
 8001110:	4633      	mov	r3, r6
 8001112:	463a      	mov	r2, r7
 8001114:	4628      	mov	r0, r5
 8001116:	6a21      	ldr	r1, [r4, #32]
 8001118:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800111c:	47e0      	blx	ip
 800111e:	2800      	cmp	r0, #0
 8001120:	dc06      	bgt.n	8001130 <__sflush_r+0xf8>
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112c:	81a3      	strh	r3, [r4, #12]
 800112e:	e790      	b.n	8001052 <__sflush_r+0x1a>
 8001130:	4407      	add	r7, r0
 8001132:	1a36      	subs	r6, r6, r0
 8001134:	e7ea      	b.n	800110c <__sflush_r+0xd4>
 8001136:	bf00      	nop
 8001138:	dfbffffe 	.word	0xdfbffffe

0800113c <_fflush_r>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	690b      	ldr	r3, [r1, #16]
 8001140:	4605      	mov	r5, r0
 8001142:	460c      	mov	r4, r1
 8001144:	b913      	cbnz	r3, 800114c <_fflush_r+0x10>
 8001146:	2500      	movs	r5, #0
 8001148:	4628      	mov	r0, r5
 800114a:	bd38      	pop	{r3, r4, r5, pc}
 800114c:	b118      	cbz	r0, 8001156 <_fflush_r+0x1a>
 800114e:	6a03      	ldr	r3, [r0, #32]
 8001150:	b90b      	cbnz	r3, 8001156 <_fflush_r+0x1a>
 8001152:	f7ff fa9f 	bl	8000694 <__sinit>
 8001156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f3      	beq.n	8001146 <_fflush_r+0xa>
 800115e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001160:	07d0      	lsls	r0, r2, #31
 8001162:	d404      	bmi.n	800116e <_fflush_r+0x32>
 8001164:	0599      	lsls	r1, r3, #22
 8001166:	d402      	bmi.n	800116e <_fflush_r+0x32>
 8001168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800116a:	f7ff fb98 	bl	800089e <__retarget_lock_acquire_recursive>
 800116e:	4628      	mov	r0, r5
 8001170:	4621      	mov	r1, r4
 8001172:	f7ff ff61 	bl	8001038 <__sflush_r>
 8001176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001178:	4605      	mov	r5, r0
 800117a:	07da      	lsls	r2, r3, #31
 800117c:	d4e4      	bmi.n	8001148 <_fflush_r+0xc>
 800117e:	89a3      	ldrh	r3, [r4, #12]
 8001180:	059b      	lsls	r3, r3, #22
 8001182:	d4e1      	bmi.n	8001148 <_fflush_r+0xc>
 8001184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001186:	f7ff fb8b 	bl	80008a0 <__retarget_lock_release_recursive>
 800118a:	e7dd      	b.n	8001148 <_fflush_r+0xc>

0800118c <__swbuf_r>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	460e      	mov	r6, r1
 8001190:	4614      	mov	r4, r2
 8001192:	4605      	mov	r5, r0
 8001194:	b118      	cbz	r0, 800119e <__swbuf_r+0x12>
 8001196:	6a03      	ldr	r3, [r0, #32]
 8001198:	b90b      	cbnz	r3, 800119e <__swbuf_r+0x12>
 800119a:	f7ff fa7b 	bl	8000694 <__sinit>
 800119e:	69a3      	ldr	r3, [r4, #24]
 80011a0:	60a3      	str	r3, [r4, #8]
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	071a      	lsls	r2, r3, #28
 80011a6:	d525      	bpl.n	80011f4 <__swbuf_r+0x68>
 80011a8:	6923      	ldr	r3, [r4, #16]
 80011aa:	b31b      	cbz	r3, 80011f4 <__swbuf_r+0x68>
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	6922      	ldr	r2, [r4, #16]
 80011b0:	b2f6      	uxtb	r6, r6
 80011b2:	1a98      	subs	r0, r3, r2
 80011b4:	6963      	ldr	r3, [r4, #20]
 80011b6:	4637      	mov	r7, r6
 80011b8:	4283      	cmp	r3, r0
 80011ba:	dc04      	bgt.n	80011c6 <__swbuf_r+0x3a>
 80011bc:	4621      	mov	r1, r4
 80011be:	4628      	mov	r0, r5
 80011c0:	f7ff ffbc 	bl	800113c <_fflush_r>
 80011c4:	b9e0      	cbnz	r0, 8001200 <__swbuf_r+0x74>
 80011c6:	68a3      	ldr	r3, [r4, #8]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60a3      	str	r3, [r4, #8]
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	6022      	str	r2, [r4, #0]
 80011d2:	701e      	strb	r6, [r3, #0]
 80011d4:	6962      	ldr	r2, [r4, #20]
 80011d6:	1c43      	adds	r3, r0, #1
 80011d8:	429a      	cmp	r2, r3
 80011da:	d004      	beq.n	80011e6 <__swbuf_r+0x5a>
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	07db      	lsls	r3, r3, #31
 80011e0:	d506      	bpl.n	80011f0 <__swbuf_r+0x64>
 80011e2:	2e0a      	cmp	r6, #10
 80011e4:	d104      	bne.n	80011f0 <__swbuf_r+0x64>
 80011e6:	4621      	mov	r1, r4
 80011e8:	4628      	mov	r0, r5
 80011ea:	f7ff ffa7 	bl	800113c <_fflush_r>
 80011ee:	b938      	cbnz	r0, 8001200 <__swbuf_r+0x74>
 80011f0:	4638      	mov	r0, r7
 80011f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f4:	4621      	mov	r1, r4
 80011f6:	4628      	mov	r0, r5
 80011f8:	f000 f806 	bl	8001208 <__swsetup_r>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d0d5      	beq.n	80011ac <__swbuf_r+0x20>
 8001200:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001204:	e7f4      	b.n	80011f0 <__swbuf_r+0x64>
	...

08001208 <__swsetup_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <__swsetup_r+0xac>)
 800120c:	4605      	mov	r5, r0
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	460c      	mov	r4, r1
 8001212:	b118      	cbz	r0, 800121c <__swsetup_r+0x14>
 8001214:	6a03      	ldr	r3, [r0, #32]
 8001216:	b90b      	cbnz	r3, 800121c <__swsetup_r+0x14>
 8001218:	f7ff fa3c 	bl	8000694 <__sinit>
 800121c:	89a3      	ldrh	r3, [r4, #12]
 800121e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001222:	0718      	lsls	r0, r3, #28
 8001224:	d422      	bmi.n	800126c <__swsetup_r+0x64>
 8001226:	06d9      	lsls	r1, r3, #27
 8001228:	d407      	bmi.n	800123a <__swsetup_r+0x32>
 800122a:	2309      	movs	r3, #9
 800122c:	602b      	str	r3, [r5, #0]
 800122e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001236:	81a3      	strh	r3, [r4, #12]
 8001238:	e034      	b.n	80012a4 <__swsetup_r+0x9c>
 800123a:	0758      	lsls	r0, r3, #29
 800123c:	d512      	bpl.n	8001264 <__swsetup_r+0x5c>
 800123e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001240:	b141      	cbz	r1, 8001254 <__swsetup_r+0x4c>
 8001242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001246:	4299      	cmp	r1, r3
 8001248:	d002      	beq.n	8001250 <__swsetup_r+0x48>
 800124a:	4628      	mov	r0, r5
 800124c:	f7ff fb2a 	bl	80008a4 <_free_r>
 8001250:	2300      	movs	r3, #0
 8001252:	6363      	str	r3, [r4, #52]	; 0x34
 8001254:	89a3      	ldrh	r3, [r4, #12]
 8001256:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800125a:	81a3      	strh	r3, [r4, #12]
 800125c:	2300      	movs	r3, #0
 800125e:	6063      	str	r3, [r4, #4]
 8001260:	6923      	ldr	r3, [r4, #16]
 8001262:	6023      	str	r3, [r4, #0]
 8001264:	89a3      	ldrh	r3, [r4, #12]
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	81a3      	strh	r3, [r4, #12]
 800126c:	6923      	ldr	r3, [r4, #16]
 800126e:	b94b      	cbnz	r3, 8001284 <__swsetup_r+0x7c>
 8001270:	89a3      	ldrh	r3, [r4, #12]
 8001272:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800127a:	d003      	beq.n	8001284 <__swsetup_r+0x7c>
 800127c:	4621      	mov	r1, r4
 800127e:	4628      	mov	r0, r5
 8001280:	f000 f85d 	bl	800133e <__smakebuf_r>
 8001284:	89a0      	ldrh	r0, [r4, #12]
 8001286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800128a:	f010 0301 	ands.w	r3, r0, #1
 800128e:	d00a      	beq.n	80012a6 <__swsetup_r+0x9e>
 8001290:	2300      	movs	r3, #0
 8001292:	60a3      	str	r3, [r4, #8]
 8001294:	6963      	ldr	r3, [r4, #20]
 8001296:	425b      	negs	r3, r3
 8001298:	61a3      	str	r3, [r4, #24]
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	b943      	cbnz	r3, 80012b0 <__swsetup_r+0xa8>
 800129e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012a2:	d1c4      	bne.n	800122e <__swsetup_r+0x26>
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
 80012a6:	0781      	lsls	r1, r0, #30
 80012a8:	bf58      	it	pl
 80012aa:	6963      	ldrpl	r3, [r4, #20]
 80012ac:	60a3      	str	r3, [r4, #8]
 80012ae:	e7f4      	b.n	800129a <__swsetup_r+0x92>
 80012b0:	2000      	movs	r0, #0
 80012b2:	e7f7      	b.n	80012a4 <__swsetup_r+0x9c>
 80012b4:	20000058 	.word	0x20000058

080012b8 <_sbrk_r>:
 80012b8:	b538      	push	{r3, r4, r5, lr}
 80012ba:	2300      	movs	r3, #0
 80012bc:	4d05      	ldr	r5, [pc, #20]	; (80012d4 <_sbrk_r+0x1c>)
 80012be:	4604      	mov	r4, r0
 80012c0:	4608      	mov	r0, r1
 80012c2:	602b      	str	r3, [r5, #0]
 80012c4:	f7ff f86a 	bl	800039c <_sbrk>
 80012c8:	1c43      	adds	r3, r0, #1
 80012ca:	d102      	bne.n	80012d2 <_sbrk_r+0x1a>
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	b103      	cbz	r3, 80012d2 <_sbrk_r+0x1a>
 80012d0:	6023      	str	r3, [r4, #0]
 80012d2:	bd38      	pop	{r3, r4, r5, pc}
 80012d4:	200001bc 	.word	0x200001bc

080012d8 <memchr>:
 80012d8:	4603      	mov	r3, r0
 80012da:	b510      	push	{r4, lr}
 80012dc:	b2c9      	uxtb	r1, r1
 80012de:	4402      	add	r2, r0
 80012e0:	4293      	cmp	r3, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	d101      	bne.n	80012ea <memchr+0x12>
 80012e6:	2000      	movs	r0, #0
 80012e8:	e003      	b.n	80012f2 <memchr+0x1a>
 80012ea:	7804      	ldrb	r4, [r0, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	428c      	cmp	r4, r1
 80012f0:	d1f6      	bne.n	80012e0 <memchr+0x8>
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <__swhatbuf_r>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	460c      	mov	r4, r1
 80012f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012fc:	4615      	mov	r5, r2
 80012fe:	2900      	cmp	r1, #0
 8001300:	461e      	mov	r6, r3
 8001302:	b096      	sub	sp, #88	; 0x58
 8001304:	da0c      	bge.n	8001320 <__swhatbuf_r+0x2c>
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	2100      	movs	r1, #0
 800130a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800130e:	bf0c      	ite	eq
 8001310:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001314:	2340      	movne	r3, #64	; 0x40
 8001316:	2000      	movs	r0, #0
 8001318:	6031      	str	r1, [r6, #0]
 800131a:	602b      	str	r3, [r5, #0]
 800131c:	b016      	add	sp, #88	; 0x58
 800131e:	bd70      	pop	{r4, r5, r6, pc}
 8001320:	466a      	mov	r2, sp
 8001322:	f000 f849 	bl	80013b8 <_fstat_r>
 8001326:	2800      	cmp	r0, #0
 8001328:	dbed      	blt.n	8001306 <__swhatbuf_r+0x12>
 800132a:	9901      	ldr	r1, [sp, #4]
 800132c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001330:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001334:	4259      	negs	r1, r3
 8001336:	4159      	adcs	r1, r3
 8001338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133c:	e7eb      	b.n	8001316 <__swhatbuf_r+0x22>

0800133e <__smakebuf_r>:
 800133e:	898b      	ldrh	r3, [r1, #12]
 8001340:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001342:	079d      	lsls	r5, r3, #30
 8001344:	4606      	mov	r6, r0
 8001346:	460c      	mov	r4, r1
 8001348:	d507      	bpl.n	800135a <__smakebuf_r+0x1c>
 800134a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800134e:	6023      	str	r3, [r4, #0]
 8001350:	6123      	str	r3, [r4, #16]
 8001352:	2301      	movs	r3, #1
 8001354:	6163      	str	r3, [r4, #20]
 8001356:	b002      	add	sp, #8
 8001358:	bd70      	pop	{r4, r5, r6, pc}
 800135a:	466a      	mov	r2, sp
 800135c:	ab01      	add	r3, sp, #4
 800135e:	f7ff ffc9 	bl	80012f4 <__swhatbuf_r>
 8001362:	9900      	ldr	r1, [sp, #0]
 8001364:	4605      	mov	r5, r0
 8001366:	4630      	mov	r0, r6
 8001368:	f7ff fb04 	bl	8000974 <_malloc_r>
 800136c:	b948      	cbnz	r0, 8001382 <__smakebuf_r+0x44>
 800136e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001372:	059a      	lsls	r2, r3, #22
 8001374:	d4ef      	bmi.n	8001356 <__smakebuf_r+0x18>
 8001376:	f023 0303 	bic.w	r3, r3, #3
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	81a3      	strh	r3, [r4, #12]
 8001380:	e7e3      	b.n	800134a <__smakebuf_r+0xc>
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	6020      	str	r0, [r4, #0]
 8001386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138a:	81a3      	strh	r3, [r4, #12]
 800138c:	9b00      	ldr	r3, [sp, #0]
 800138e:	6120      	str	r0, [r4, #16]
 8001390:	6163      	str	r3, [r4, #20]
 8001392:	9b01      	ldr	r3, [sp, #4]
 8001394:	b15b      	cbz	r3, 80013ae <__smakebuf_r+0x70>
 8001396:	4630      	mov	r0, r6
 8001398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800139c:	f000 f81e 	bl	80013dc <_isatty_r>
 80013a0:	b128      	cbz	r0, 80013ae <__smakebuf_r+0x70>
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	f023 0303 	bic.w	r3, r3, #3
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	81a3      	strh	r3, [r4, #12]
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	431d      	orrs	r5, r3
 80013b2:	81a5      	strh	r5, [r4, #12]
 80013b4:	e7cf      	b.n	8001356 <__smakebuf_r+0x18>
	...

080013b8 <_fstat_r>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	2300      	movs	r3, #0
 80013bc:	4d06      	ldr	r5, [pc, #24]	; (80013d8 <_fstat_r+0x20>)
 80013be:	4604      	mov	r4, r0
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	602b      	str	r3, [r5, #0]
 80013c6:	f7fe ffc3 	bl	8000350 <_fstat>
 80013ca:	1c43      	adds	r3, r0, #1
 80013cc:	d102      	bne.n	80013d4 <_fstat_r+0x1c>
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	b103      	cbz	r3, 80013d4 <_fstat_r+0x1c>
 80013d2:	6023      	str	r3, [r4, #0]
 80013d4:	bd38      	pop	{r3, r4, r5, pc}
 80013d6:	bf00      	nop
 80013d8:	200001bc 	.word	0x200001bc

080013dc <_isatty_r>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	2300      	movs	r3, #0
 80013e0:	4d05      	ldr	r5, [pc, #20]	; (80013f8 <_isatty_r+0x1c>)
 80013e2:	4604      	mov	r4, r0
 80013e4:	4608      	mov	r0, r1
 80013e6:	602b      	str	r3, [r5, #0]
 80013e8:	f7fe ffc1 	bl	800036e <_isatty>
 80013ec:	1c43      	adds	r3, r0, #1
 80013ee:	d102      	bne.n	80013f6 <_isatty_r+0x1a>
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	b103      	cbz	r3, 80013f6 <_isatty_r+0x1a>
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	bd38      	pop	{r3, r4, r5, pc}
 80013f8:	200001bc 	.word	0x200001bc

080013fc <_init>:
 80013fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fe:	bf00      	nop
 8001400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001402:	bc08      	pop	{r3}
 8001404:	469e      	mov	lr, r3
 8001406:	4770      	bx	lr

08001408 <_fini>:
 8001408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140a:	bf00      	nop
 800140c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140e:	bc08      	pop	{r3}
 8001410:	469e      	mov	lr, r3
 8001412:	4770      	bx	lr
