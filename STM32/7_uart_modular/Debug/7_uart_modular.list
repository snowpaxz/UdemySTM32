
7_uart_modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000124  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d18  08000124  08000124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000e3c  08000e3c  00010e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e5c  08000e5c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e5c  08000e5c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e5c  08000e5c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e5c  08000e5c  00010e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e60  08000e60  00010e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000ec0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000ec0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dc0  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000519  00000000  00000000  00020e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  000213a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fd  00000000  00000000  00021520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f4ee  00000000  00000000  0002161d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cf4  00000000  00000000  00030b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000504c4  00000000  00000000  000327ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ac4  00000000  00000000  00082cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00083788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000124 <__do_global_dtors_aux>:
 8000124:	b510      	push	{r4, lr}
 8000126:	4c05      	ldr	r4, [pc, #20]	; (800013c <__do_global_dtors_aux+0x18>)
 8000128:	7823      	ldrb	r3, [r4, #0]
 800012a:	b933      	cbnz	r3, 800013a <__do_global_dtors_aux+0x16>
 800012c:	4b04      	ldr	r3, [pc, #16]	; (8000140 <__do_global_dtors_aux+0x1c>)
 800012e:	b113      	cbz	r3, 8000136 <__do_global_dtors_aux+0x12>
 8000130:	4804      	ldr	r0, [pc, #16]	; (8000144 <__do_global_dtors_aux+0x20>)
 8000132:	f3af 8000 	nop.w
 8000136:	2301      	movs	r3, #1
 8000138:	7023      	strb	r3, [r4, #0]
 800013a:	bd10      	pop	{r4, pc}
 800013c:	2000005c 	.word	0x2000005c
 8000140:	00000000 	.word	0x00000000
 8000144:	08000e24 	.word	0x08000e24

08000148 <frame_dummy>:
 8000148:	b508      	push	{r3, lr}
 800014a:	4b03      	ldr	r3, [pc, #12]	; (8000158 <frame_dummy+0x10>)
 800014c:	b11b      	cbz	r3, 8000156 <frame_dummy+0xe>
 800014e:	4903      	ldr	r1, [pc, #12]	; (800015c <frame_dummy+0x14>)
 8000150:	4803      	ldr	r0, [pc, #12]	; (8000160 <frame_dummy+0x18>)
 8000152:	f3af 8000 	nop.w
 8000156:	bd08      	pop	{r3, pc}
 8000158:	00000000 	.word	0x00000000
 800015c:	20000060 	.word	0x20000060
 8000160:	08000e24 	.word	0x08000e24

08000164 <main>:
#include "uart.h"
#include "myclock.h"


int main(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
	// STM32L152RE restarts to approximately 2MHz
	// Need to step this up to 16MHz
	clock_step_up_to_16M();
 800016a:	f000 f82f 	bl	80001cc <clock_step_up_to_16M>

	uart2_tx_init();
 800016e:	f000 f907 	bl	8000380 <uart2_tx_init>
	while(1)
	{
		printf("Hello from STM32L152!......\r\n");
 8000172:	4807      	ldr	r0, [pc, #28]	; (8000190 <main+0x2c>)
 8000174:	f000 fac8 	bl	8000708 <puts>

		for(int i = 0; i < 100000; i++){}
 8000178:	2300      	movs	r3, #0
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	e002      	b.n	8000184 <main+0x20>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	3301      	adds	r3, #1
 8000182:	607b      	str	r3, [r7, #4]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4a03      	ldr	r2, [pc, #12]	; (8000194 <main+0x30>)
 8000188:	4293      	cmp	r3, r2
 800018a:	ddf8      	ble.n	800017e <main+0x1a>
		printf("Hello from STM32L152!......\r\n");
 800018c:	e7f1      	b.n	8000172 <main+0xe>
 800018e:	bf00      	nop
 8000190:	08000e3c 	.word	0x08000e3c
 8000194:	0001869f 	.word	0x0001869f

08000198 <clock_step_up_to_4M>:

void clock_step_up_to_4M();


void clock_step_up_to_4M()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	RCC->ICSCR |= (1U<<15);
 800019c:	4b0a      	ldr	r3, [pc, #40]	; (80001c8 <clock_step_up_to_4M+0x30>)
 800019e:	685b      	ldr	r3, [r3, #4]
 80001a0:	4a09      	ldr	r2, [pc, #36]	; (80001c8 <clock_step_up_to_4M+0x30>)
 80001a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001a6:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= (1U<<14);
 80001a8:	4b07      	ldr	r3, [pc, #28]	; (80001c8 <clock_step_up_to_4M+0x30>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a06      	ldr	r2, [pc, #24]	; (80001c8 <clock_step_up_to_4M+0x30>)
 80001ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001b2:	6053      	str	r3, [r2, #4]
	RCC->ICSCR &= ~(1U<<13);
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <clock_step_up_to_4M+0x30>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <clock_step_up_to_4M+0x30>)
 80001ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001be:	6053      	str	r3, [r2, #4]
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	40023800 	.word	0x40023800

080001cc <clock_step_up_to_16M>:

void clock_step_up_to_16M()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	clock_step_up_to_4M();
 80001d2:	f7ff ffe1 	bl	8000198 <clock_step_up_to_4M>
	for(int i = 0; i<25; i++){}
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e002      	b.n	80001e2 <clock_step_up_to_16M+0x16>
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3301      	adds	r3, #1
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b18      	cmp	r3, #24
 80001e6:	ddf9      	ble.n	80001dc <clock_step_up_to_16M+0x10>

	RCC->CR |= (1U<<0);
 80001e8:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <clock_step_up_to_16M+0x58>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <clock_step_up_to_16M+0x58>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1U<<1))){}
 80001f4:	bf00      	nop
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <clock_step_up_to_16M+0x58>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <clock_step_up_to_16M+0x2a>

	RCC->CFGR &= ~(1U<<1);
 8000202:	4b08      	ldr	r3, [pc, #32]	; (8000224 <clock_step_up_to_16M+0x58>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a07      	ldr	r2, [pc, #28]	; (8000224 <clock_step_up_to_16M+0x58>)
 8000208:	f023 0302 	bic.w	r3, r3, #2
 800020c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (1U<<0);
 800020e:	4b05      	ldr	r3, [pc, #20]	; (8000224 <clock_step_up_to_16M+0x58>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	4a04      	ldr	r2, [pc, #16]	; (8000224 <clock_step_up_to_16M+0x58>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6093      	str	r3, [r2, #8]
}
 800021a:	bf00      	nop
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800

08000228 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]
 8000238:	e00a      	b.n	8000250 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800023a:	f3af 8000 	nop.w
 800023e:	4601      	mov	r1, r0
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	60ba      	str	r2, [r7, #8]
 8000246:	b2ca      	uxtb	r2, r1
 8000248:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	3301      	adds	r3, #1
 800024e:	617b      	str	r3, [r7, #20]
 8000250:	697a      	ldr	r2, [r7, #20]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	429a      	cmp	r2, r3
 8000256:	dbf0      	blt.n	800023a <_read+0x12>
  }

  return len;
 8000258:	687b      	ldr	r3, [r7, #4]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3718      	adds	r7, #24
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}

08000262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	b086      	sub	sp, #24
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
 8000272:	e009      	b.n	8000288 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	1c5a      	adds	r2, r3, #1
 8000278:	60ba      	str	r2, [r7, #8]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f873 	bl	8000368 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	3301      	adds	r3, #1
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	697a      	ldr	r2, [r7, #20]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	429a      	cmp	r2, r3
 800028e:	dbf1      	blt.n	8000274 <_write+0x12>
  }
  return len;
 8000290:	687b      	ldr	r3, [r7, #4]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3718      	adds	r7, #24
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <_close>:

int _close(int file)
{
 800029a:	b480      	push	{r7}
 800029c:	b083      	sub	sp, #12
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002c0:	605a      	str	r2, [r3, #4]
  return 0;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr

080002ce <_isatty>:

int _isatty(int file)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002d6:	2301      	movs	r3, #1
}
 80002d8:	4618      	mov	r0, r3
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr

080002e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002e2:	b480      	push	{r7}
 80002e4:	b085      	sub	sp, #20
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	60f8      	str	r0, [r7, #12]
 80002ea:	60b9      	str	r1, [r7, #8]
 80002ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3714      	adds	r7, #20
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
	...

080002fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000304:	4a14      	ldr	r2, [pc, #80]	; (8000358 <_sbrk+0x5c>)
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <_sbrk+0x60>)
 8000308:	1ad3      	subs	r3, r2, r3
 800030a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <_sbrk+0x64>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <_sbrk+0x64>)
 800031a:	4a12      	ldr	r2, [pc, #72]	; (8000364 <_sbrk+0x68>)
 800031c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <_sbrk+0x64>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	693a      	ldr	r2, [r7, #16]
 8000328:	429a      	cmp	r2, r3
 800032a:	d207      	bcs.n	800033c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800032c:	f000 fb1a 	bl	8000964 <__errno>
 8000330:	4603      	mov	r3, r0
 8000332:	220c      	movs	r2, #12
 8000334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800033a:	e009      	b.n	8000350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <_sbrk+0x64>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000342:	4b07      	ldr	r3, [pc, #28]	; (8000360 <_sbrk+0x64>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <_sbrk+0x64>)
 800034c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800034e:	68fb      	ldr	r3, [r7, #12]
}
 8000350:	4618      	mov	r0, r3
 8000352:	3718      	adds	r7, #24
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20014000 	.word	0x20014000
 800035c:	00000400 	.word	0x00000400
 8000360:	20000078 	.word	0x20000078
 8000364:	200001c8 	.word	0x200001c8

08000368 <__io_putchar>:

void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f000 f851 	bl	8000418 <uart2_write>
	return(ch);
 8000376:	687b      	ldr	r3, [r7, #4]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <uart2_tx_init>:


void uart2_tx_init()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	/********* Configure uart GPIO tx pin *********/
	/* Enable clock access to GPIOA */
	RCC->AHBENR |= GPIOAEN;
 8000384:	4b20      	ldr	r3, [pc, #128]	; (8000408 <uart2_tx_init+0x88>)
 8000386:	69db      	ldr	r3, [r3, #28]
 8000388:	4a1f      	ldr	r2, [pc, #124]	; (8000408 <uart2_tx_init+0x88>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	61d3      	str	r3, [r2, #28]

	/* Set PA2 mode to alternate function mode */
	GPIOA->MODER &= ~(1U<<4);
 8000390:	4b1e      	ldr	r3, [pc, #120]	; (800040c <uart2_tx_init+0x8c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <uart2_tx_init+0x8c>)
 8000396:	f023 0310 	bic.w	r3, r3, #16
 800039a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <uart2_tx_init+0x8c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a1a      	ldr	r2, [pc, #104]	; (800040c <uart2_tx_init+0x8c>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6013      	str	r3, [r2, #0]

	/* Set PA2 alternate function type to UART_TX (AF07) */
	GPIOA->AFR[0] |= (1U<<8);
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <uart2_tx_init+0x8c>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	4a17      	ldr	r2, [pc, #92]	; (800040c <uart2_tx_init+0x8c>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <uart2_tx_init+0x8c>)
 80003b6:	6a1b      	ldr	r3, [r3, #32]
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <uart2_tx_init+0x8c>)
 80003ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <uart2_tx_init+0x8c>)
 80003c2:	6a1b      	ldr	r3, [r3, #32]
 80003c4:	4a11      	ldr	r2, [pc, #68]	; (800040c <uart2_tx_init+0x8c>)
 80003c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <uart2_tx_init+0x8c>)
 80003ce:	6a1b      	ldr	r3, [r3, #32]
 80003d0:	4a0e      	ldr	r2, [pc, #56]	; (800040c <uart2_tx_init+0x8c>)
 80003d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003d6:	6213      	str	r3, [r2, #32]

	/********* Configure uart module *********/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <uart2_tx_init+0x88>)
 80003da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003dc:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <uart2_tx_init+0x88>)
 80003de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e2:	6253      	str	r3, [r2, #36]	; 0x24

	/* Configure UART baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80003e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e8:	4909      	ldr	r1, [pc, #36]	; (8000410 <uart2_tx_init+0x90>)
 80003ea:	480a      	ldr	r0, [pc, #40]	; (8000414 <uart2_tx_init+0x94>)
 80003ec:	f000 f82a 	bl	8000444 <uart_set_baudrate>

	/* Configure transfer direction */
	USART2->CR1 = CR1_TE;
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <uart2_tx_init+0x94>)
 80003f2:	2208      	movs	r2, #8
 80003f4:	60da      	str	r2, [r3, #12]

	/* Enable uart module */
	USART2->CR1 |= CR1_UE;
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <uart2_tx_init+0x94>)
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	4a06      	ldr	r2, [pc, #24]	; (8000414 <uart2_tx_init+0x94>)
 80003fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000400:	60d3      	str	r3, [r2, #12]
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40023800 	.word	0x40023800
 800040c:	40020000 	.word	0x40020000
 8000410:	00f42400 	.word	0x00f42400
 8000414:	40004400 	.word	0x40004400

08000418 <uart2_write>:

void uart2_write(int ch)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	/* Make sure TX data register is empty */
	while(!(USART2->SR & SR_TXE)){}
 8000420:	bf00      	nop
 8000422:	4b07      	ldr	r3, [pc, #28]	; (8000440 <uart2_write+0x28>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <uart2_write+0xa>
	/* Write to TX data register */
	USART2->DR	= (ch & 0xFF);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a03      	ldr	r2, [pc, #12]	; (8000440 <uart2_write+0x28>)
 8000432:	b2db      	uxtb	r3, r3
 8000434:	6053      	str	r3, [r2, #4]
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	40004400 	.word	0x40004400

08000444 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, baudRate);
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	68b8      	ldr	r0, [r7, #8]
 8000454:	f000 f808 	bl	8000468 <compute_uart_bd>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	609a      	str	r2, [r3, #8]
}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
	return PeriphClk / baudRate;
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	fbb2 f3f3 	udiv	r3, r2, r3
 800047a:	b29b      	uxth	r3, r3
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
	...

08000488 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800048c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	; (80004c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	; (80004d4 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004b6:	f000 fa5b 	bl	8000970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ba:	f7ff fe53 	bl	8000164 <main>

080004be <LoopForever>:

LoopForever:
  b LoopForever
 80004be:	e7fe      	b.n	80004be <LoopForever>
  ldr   r0, =_estack
 80004c0:	20014000 	.word	0x20014000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004cc:	08000e64 	.word	0x08000e64
  ldr r2, =_sbss
 80004d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80004d4:	200001c8 	.word	0x200001c8

080004d8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_IRQHandler>
	...

080004dc <std>:
 80004dc:	2300      	movs	r3, #0
 80004de:	b510      	push	{r4, lr}
 80004e0:	4604      	mov	r4, r0
 80004e2:	e9c0 3300 	strd	r3, r3, [r0]
 80004e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004ea:	6083      	str	r3, [r0, #8]
 80004ec:	8181      	strh	r1, [r0, #12]
 80004ee:	6643      	str	r3, [r0, #100]	; 0x64
 80004f0:	81c2      	strh	r2, [r0, #14]
 80004f2:	6183      	str	r3, [r0, #24]
 80004f4:	4619      	mov	r1, r3
 80004f6:	2208      	movs	r2, #8
 80004f8:	305c      	adds	r0, #92	; 0x5c
 80004fa:	f000 f9e5 	bl	80008c8 <memset>
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <std+0x58>)
 8000500:	6224      	str	r4, [r4, #32]
 8000502:	6263      	str	r3, [r4, #36]	; 0x24
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <std+0x5c>)
 8000506:	62a3      	str	r3, [r4, #40]	; 0x28
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <std+0x60>)
 800050a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <std+0x64>)
 800050e:	6323      	str	r3, [r4, #48]	; 0x30
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <std+0x68>)
 8000512:	429c      	cmp	r4, r3
 8000514:	d006      	beq.n	8000524 <std+0x48>
 8000516:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800051a:	4294      	cmp	r4, r2
 800051c:	d002      	beq.n	8000524 <std+0x48>
 800051e:	33d0      	adds	r3, #208	; 0xd0
 8000520:	429c      	cmp	r4, r3
 8000522:	d105      	bne.n	8000530 <std+0x54>
 8000524:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800052c:	f000 ba44 	b.w	80009b8 <__retarget_lock_init_recursive>
 8000530:	bd10      	pop	{r4, pc}
 8000532:	bf00      	nop
 8000534:	08000719 	.word	0x08000719
 8000538:	0800073b 	.word	0x0800073b
 800053c:	08000773 	.word	0x08000773
 8000540:	08000797 	.word	0x08000797
 8000544:	2000007c 	.word	0x2000007c

08000548 <stdio_exit_handler>:
 8000548:	4a02      	ldr	r2, [pc, #8]	; (8000554 <stdio_exit_handler+0xc>)
 800054a:	4903      	ldr	r1, [pc, #12]	; (8000558 <stdio_exit_handler+0x10>)
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <stdio_exit_handler+0x14>)
 800054e:	f000 b869 	b.w	8000624 <_fwalk_sglue>
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	08000cad 	.word	0x08000cad
 800055c:	2000000c 	.word	0x2000000c

08000560 <cleanup_stdio>:
 8000560:	6841      	ldr	r1, [r0, #4]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <cleanup_stdio+0x34>)
 8000564:	b510      	push	{r4, lr}
 8000566:	4299      	cmp	r1, r3
 8000568:	4604      	mov	r4, r0
 800056a:	d001      	beq.n	8000570 <cleanup_stdio+0x10>
 800056c:	f000 fb9e 	bl	8000cac <_fflush_r>
 8000570:	68a1      	ldr	r1, [r4, #8]
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <cleanup_stdio+0x38>)
 8000574:	4299      	cmp	r1, r3
 8000576:	d002      	beq.n	800057e <cleanup_stdio+0x1e>
 8000578:	4620      	mov	r0, r4
 800057a:	f000 fb97 	bl	8000cac <_fflush_r>
 800057e:	68e1      	ldr	r1, [r4, #12]
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <cleanup_stdio+0x3c>)
 8000582:	4299      	cmp	r1, r3
 8000584:	d004      	beq.n	8000590 <cleanup_stdio+0x30>
 8000586:	4620      	mov	r0, r4
 8000588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800058c:	f000 bb8e 	b.w	8000cac <_fflush_r>
 8000590:	bd10      	pop	{r4, pc}
 8000592:	bf00      	nop
 8000594:	2000007c 	.word	0x2000007c
 8000598:	200000e4 	.word	0x200000e4
 800059c:	2000014c 	.word	0x2000014c

080005a0 <global_stdio_init.part.0>:
 80005a0:	b510      	push	{r4, lr}
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <global_stdio_init.part.0+0x30>)
 80005a4:	4c0b      	ldr	r4, [pc, #44]	; (80005d4 <global_stdio_init.part.0+0x34>)
 80005a6:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <global_stdio_init.part.0+0x38>)
 80005a8:	4620      	mov	r0, r4
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	2104      	movs	r1, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	f7ff ff94 	bl	80004dc <std>
 80005b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80005b8:	2201      	movs	r2, #1
 80005ba:	2109      	movs	r1, #9
 80005bc:	f7ff ff8e 	bl	80004dc <std>
 80005c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80005c4:	2202      	movs	r2, #2
 80005c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005ca:	2112      	movs	r1, #18
 80005cc:	f7ff bf86 	b.w	80004dc <std>
 80005d0:	200001b4 	.word	0x200001b4
 80005d4:	2000007c 	.word	0x2000007c
 80005d8:	08000549 	.word	0x08000549

080005dc <__sfp_lock_acquire>:
 80005dc:	4801      	ldr	r0, [pc, #4]	; (80005e4 <__sfp_lock_acquire+0x8>)
 80005de:	f000 b9ec 	b.w	80009ba <__retarget_lock_acquire_recursive>
 80005e2:	bf00      	nop
 80005e4:	200001bd 	.word	0x200001bd

080005e8 <__sfp_lock_release>:
 80005e8:	4801      	ldr	r0, [pc, #4]	; (80005f0 <__sfp_lock_release+0x8>)
 80005ea:	f000 b9e7 	b.w	80009bc <__retarget_lock_release_recursive>
 80005ee:	bf00      	nop
 80005f0:	200001bd 	.word	0x200001bd

080005f4 <__sinit>:
 80005f4:	b510      	push	{r4, lr}
 80005f6:	4604      	mov	r4, r0
 80005f8:	f7ff fff0 	bl	80005dc <__sfp_lock_acquire>
 80005fc:	6a23      	ldr	r3, [r4, #32]
 80005fe:	b11b      	cbz	r3, 8000608 <__sinit+0x14>
 8000600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000604:	f7ff bff0 	b.w	80005e8 <__sfp_lock_release>
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__sinit+0x28>)
 800060a:	6223      	str	r3, [r4, #32]
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__sinit+0x2c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f5      	bne.n	8000600 <__sinit+0xc>
 8000614:	f7ff ffc4 	bl	80005a0 <global_stdio_init.part.0>
 8000618:	e7f2      	b.n	8000600 <__sinit+0xc>
 800061a:	bf00      	nop
 800061c:	08000561 	.word	0x08000561
 8000620:	200001b4 	.word	0x200001b4

08000624 <_fwalk_sglue>:
 8000624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000628:	4607      	mov	r7, r0
 800062a:	4688      	mov	r8, r1
 800062c:	4614      	mov	r4, r2
 800062e:	2600      	movs	r6, #0
 8000630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000634:	f1b9 0901 	subs.w	r9, r9, #1
 8000638:	d505      	bpl.n	8000646 <_fwalk_sglue+0x22>
 800063a:	6824      	ldr	r4, [r4, #0]
 800063c:	2c00      	cmp	r4, #0
 800063e:	d1f7      	bne.n	8000630 <_fwalk_sglue+0xc>
 8000640:	4630      	mov	r0, r6
 8000642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000646:	89ab      	ldrh	r3, [r5, #12]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d907      	bls.n	800065c <_fwalk_sglue+0x38>
 800064c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000650:	3301      	adds	r3, #1
 8000652:	d003      	beq.n	800065c <_fwalk_sglue+0x38>
 8000654:	4629      	mov	r1, r5
 8000656:	4638      	mov	r0, r7
 8000658:	47c0      	blx	r8
 800065a:	4306      	orrs	r6, r0
 800065c:	3568      	adds	r5, #104	; 0x68
 800065e:	e7e9      	b.n	8000634 <_fwalk_sglue+0x10>

08000660 <_puts_r>:
 8000660:	6a03      	ldr	r3, [r0, #32]
 8000662:	b570      	push	{r4, r5, r6, lr}
 8000664:	4605      	mov	r5, r0
 8000666:	460e      	mov	r6, r1
 8000668:	6884      	ldr	r4, [r0, #8]
 800066a:	b90b      	cbnz	r3, 8000670 <_puts_r+0x10>
 800066c:	f7ff ffc2 	bl	80005f4 <__sinit>
 8000670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000672:	07db      	lsls	r3, r3, #31
 8000674:	d405      	bmi.n	8000682 <_puts_r+0x22>
 8000676:	89a3      	ldrh	r3, [r4, #12]
 8000678:	0598      	lsls	r0, r3, #22
 800067a:	d402      	bmi.n	8000682 <_puts_r+0x22>
 800067c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800067e:	f000 f99c 	bl	80009ba <__retarget_lock_acquire_recursive>
 8000682:	89a3      	ldrh	r3, [r4, #12]
 8000684:	0719      	lsls	r1, r3, #28
 8000686:	d513      	bpl.n	80006b0 <_puts_r+0x50>
 8000688:	6923      	ldr	r3, [r4, #16]
 800068a:	b18b      	cbz	r3, 80006b0 <_puts_r+0x50>
 800068c:	3e01      	subs	r6, #1
 800068e:	68a3      	ldr	r3, [r4, #8]
 8000690:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000694:	3b01      	subs	r3, #1
 8000696:	60a3      	str	r3, [r4, #8]
 8000698:	b9e9      	cbnz	r1, 80006d6 <_puts_r+0x76>
 800069a:	2b00      	cmp	r3, #0
 800069c:	da2e      	bge.n	80006fc <_puts_r+0x9c>
 800069e:	4622      	mov	r2, r4
 80006a0:	210a      	movs	r1, #10
 80006a2:	4628      	mov	r0, r5
 80006a4:	f000 f87b 	bl	800079e <__swbuf_r>
 80006a8:	3001      	adds	r0, #1
 80006aa:	d007      	beq.n	80006bc <_puts_r+0x5c>
 80006ac:	250a      	movs	r5, #10
 80006ae:	e007      	b.n	80006c0 <_puts_r+0x60>
 80006b0:	4621      	mov	r1, r4
 80006b2:	4628      	mov	r0, r5
 80006b4:	f000 f8b0 	bl	8000818 <__swsetup_r>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d0e7      	beq.n	800068c <_puts_r+0x2c>
 80006bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80006c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006c2:	07da      	lsls	r2, r3, #31
 80006c4:	d405      	bmi.n	80006d2 <_puts_r+0x72>
 80006c6:	89a3      	ldrh	r3, [r4, #12]
 80006c8:	059b      	lsls	r3, r3, #22
 80006ca:	d402      	bmi.n	80006d2 <_puts_r+0x72>
 80006cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006ce:	f000 f975 	bl	80009bc <__retarget_lock_release_recursive>
 80006d2:	4628      	mov	r0, r5
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da04      	bge.n	80006e4 <_puts_r+0x84>
 80006da:	69a2      	ldr	r2, [r4, #24]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dc06      	bgt.n	80006ee <_puts_r+0x8e>
 80006e0:	290a      	cmp	r1, #10
 80006e2:	d004      	beq.n	80006ee <_puts_r+0x8e>
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	6022      	str	r2, [r4, #0]
 80006ea:	7019      	strb	r1, [r3, #0]
 80006ec:	e7cf      	b.n	800068e <_puts_r+0x2e>
 80006ee:	4622      	mov	r2, r4
 80006f0:	4628      	mov	r0, r5
 80006f2:	f000 f854 	bl	800079e <__swbuf_r>
 80006f6:	3001      	adds	r0, #1
 80006f8:	d1c9      	bne.n	800068e <_puts_r+0x2e>
 80006fa:	e7df      	b.n	80006bc <_puts_r+0x5c>
 80006fc:	250a      	movs	r5, #10
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	6022      	str	r2, [r4, #0]
 8000704:	701d      	strb	r5, [r3, #0]
 8000706:	e7db      	b.n	80006c0 <_puts_r+0x60>

08000708 <puts>:
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <puts+0xc>)
 800070a:	4601      	mov	r1, r0
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f7ff bfa7 	b.w	8000660 <_puts_r>
 8000712:	bf00      	nop
 8000714:	20000058 	.word	0x20000058

08000718 <__sread>:
 8000718:	b510      	push	{r4, lr}
 800071a:	460c      	mov	r4, r1
 800071c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000720:	f000 f8fc 	bl	800091c <_read_r>
 8000724:	2800      	cmp	r0, #0
 8000726:	bfab      	itete	ge
 8000728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800072a:	89a3      	ldrhlt	r3, [r4, #12]
 800072c:	181b      	addge	r3, r3, r0
 800072e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000732:	bfac      	ite	ge
 8000734:	6563      	strge	r3, [r4, #84]	; 0x54
 8000736:	81a3      	strhlt	r3, [r4, #12]
 8000738:	bd10      	pop	{r4, pc}

0800073a <__swrite>:
 800073a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800073e:	461f      	mov	r7, r3
 8000740:	898b      	ldrh	r3, [r1, #12]
 8000742:	4605      	mov	r5, r0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	460c      	mov	r4, r1
 8000748:	4616      	mov	r6, r2
 800074a:	d505      	bpl.n	8000758 <__swrite+0x1e>
 800074c:	2302      	movs	r3, #2
 800074e:	2200      	movs	r2, #0
 8000750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000754:	f000 f8d0 	bl	80008f8 <_lseek_r>
 8000758:	89a3      	ldrh	r3, [r4, #12]
 800075a:	4632      	mov	r2, r6
 800075c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000760:	81a3      	strh	r3, [r4, #12]
 8000762:	4628      	mov	r0, r5
 8000764:	463b      	mov	r3, r7
 8000766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800076a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800076e:	f000 b8e7 	b.w	8000940 <_write_r>

08000772 <__sseek>:
 8000772:	b510      	push	{r4, lr}
 8000774:	460c      	mov	r4, r1
 8000776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800077a:	f000 f8bd 	bl	80008f8 <_lseek_r>
 800077e:	1c43      	adds	r3, r0, #1
 8000780:	89a3      	ldrh	r3, [r4, #12]
 8000782:	bf15      	itete	ne
 8000784:	6560      	strne	r0, [r4, #84]	; 0x54
 8000786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800078a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800078e:	81a3      	strheq	r3, [r4, #12]
 8000790:	bf18      	it	ne
 8000792:	81a3      	strhne	r3, [r4, #12]
 8000794:	bd10      	pop	{r4, pc}

08000796 <__sclose>:
 8000796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800079a:	f000 b89d 	b.w	80008d8 <_close_r>

0800079e <__swbuf_r>:
 800079e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a0:	460e      	mov	r6, r1
 80007a2:	4614      	mov	r4, r2
 80007a4:	4605      	mov	r5, r0
 80007a6:	b118      	cbz	r0, 80007b0 <__swbuf_r+0x12>
 80007a8:	6a03      	ldr	r3, [r0, #32]
 80007aa:	b90b      	cbnz	r3, 80007b0 <__swbuf_r+0x12>
 80007ac:	f7ff ff22 	bl	80005f4 <__sinit>
 80007b0:	69a3      	ldr	r3, [r4, #24]
 80007b2:	60a3      	str	r3, [r4, #8]
 80007b4:	89a3      	ldrh	r3, [r4, #12]
 80007b6:	071a      	lsls	r2, r3, #28
 80007b8:	d525      	bpl.n	8000806 <__swbuf_r+0x68>
 80007ba:	6923      	ldr	r3, [r4, #16]
 80007bc:	b31b      	cbz	r3, 8000806 <__swbuf_r+0x68>
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	6922      	ldr	r2, [r4, #16]
 80007c2:	b2f6      	uxtb	r6, r6
 80007c4:	1a98      	subs	r0, r3, r2
 80007c6:	6963      	ldr	r3, [r4, #20]
 80007c8:	4637      	mov	r7, r6
 80007ca:	4283      	cmp	r3, r0
 80007cc:	dc04      	bgt.n	80007d8 <__swbuf_r+0x3a>
 80007ce:	4621      	mov	r1, r4
 80007d0:	4628      	mov	r0, r5
 80007d2:	f000 fa6b 	bl	8000cac <_fflush_r>
 80007d6:	b9e0      	cbnz	r0, 8000812 <__swbuf_r+0x74>
 80007d8:	68a3      	ldr	r3, [r4, #8]
 80007da:	3b01      	subs	r3, #1
 80007dc:	60a3      	str	r3, [r4, #8]
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	6022      	str	r2, [r4, #0]
 80007e4:	701e      	strb	r6, [r3, #0]
 80007e6:	6962      	ldr	r2, [r4, #20]
 80007e8:	1c43      	adds	r3, r0, #1
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d004      	beq.n	80007f8 <__swbuf_r+0x5a>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	07db      	lsls	r3, r3, #31
 80007f2:	d506      	bpl.n	8000802 <__swbuf_r+0x64>
 80007f4:	2e0a      	cmp	r6, #10
 80007f6:	d104      	bne.n	8000802 <__swbuf_r+0x64>
 80007f8:	4621      	mov	r1, r4
 80007fa:	4628      	mov	r0, r5
 80007fc:	f000 fa56 	bl	8000cac <_fflush_r>
 8000800:	b938      	cbnz	r0, 8000812 <__swbuf_r+0x74>
 8000802:	4638      	mov	r0, r7
 8000804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000806:	4621      	mov	r1, r4
 8000808:	4628      	mov	r0, r5
 800080a:	f000 f805 	bl	8000818 <__swsetup_r>
 800080e:	2800      	cmp	r0, #0
 8000810:	d0d5      	beq.n	80007be <__swbuf_r+0x20>
 8000812:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000816:	e7f4      	b.n	8000802 <__swbuf_r+0x64>

08000818 <__swsetup_r>:
 8000818:	b538      	push	{r3, r4, r5, lr}
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <__swsetup_r+0xac>)
 800081c:	4605      	mov	r5, r0
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	460c      	mov	r4, r1
 8000822:	b118      	cbz	r0, 800082c <__swsetup_r+0x14>
 8000824:	6a03      	ldr	r3, [r0, #32]
 8000826:	b90b      	cbnz	r3, 800082c <__swsetup_r+0x14>
 8000828:	f7ff fee4 	bl	80005f4 <__sinit>
 800082c:	89a3      	ldrh	r3, [r4, #12]
 800082e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000832:	0718      	lsls	r0, r3, #28
 8000834:	d422      	bmi.n	800087c <__swsetup_r+0x64>
 8000836:	06d9      	lsls	r1, r3, #27
 8000838:	d407      	bmi.n	800084a <__swsetup_r+0x32>
 800083a:	2309      	movs	r3, #9
 800083c:	602b      	str	r3, [r5, #0]
 800083e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000846:	81a3      	strh	r3, [r4, #12]
 8000848:	e034      	b.n	80008b4 <__swsetup_r+0x9c>
 800084a:	0758      	lsls	r0, r3, #29
 800084c:	d512      	bpl.n	8000874 <__swsetup_r+0x5c>
 800084e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000850:	b141      	cbz	r1, 8000864 <__swsetup_r+0x4c>
 8000852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000856:	4299      	cmp	r1, r3
 8000858:	d002      	beq.n	8000860 <__swsetup_r+0x48>
 800085a:	4628      	mov	r0, r5
 800085c:	f000 f8b0 	bl	80009c0 <_free_r>
 8000860:	2300      	movs	r3, #0
 8000862:	6363      	str	r3, [r4, #52]	; 0x34
 8000864:	89a3      	ldrh	r3, [r4, #12]
 8000866:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800086a:	81a3      	strh	r3, [r4, #12]
 800086c:	2300      	movs	r3, #0
 800086e:	6063      	str	r3, [r4, #4]
 8000870:	6923      	ldr	r3, [r4, #16]
 8000872:	6023      	str	r3, [r4, #0]
 8000874:	89a3      	ldrh	r3, [r4, #12]
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	81a3      	strh	r3, [r4, #12]
 800087c:	6923      	ldr	r3, [r4, #16]
 800087e:	b94b      	cbnz	r3, 8000894 <__swsetup_r+0x7c>
 8000880:	89a3      	ldrh	r3, [r4, #12]
 8000882:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800088a:	d003      	beq.n	8000894 <__swsetup_r+0x7c>
 800088c:	4621      	mov	r1, r4
 800088e:	4628      	mov	r0, r5
 8000890:	f000 fa59 	bl	8000d46 <__smakebuf_r>
 8000894:	89a0      	ldrh	r0, [r4, #12]
 8000896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800089a:	f010 0301 	ands.w	r3, r0, #1
 800089e:	d00a      	beq.n	80008b6 <__swsetup_r+0x9e>
 80008a0:	2300      	movs	r3, #0
 80008a2:	60a3      	str	r3, [r4, #8]
 80008a4:	6963      	ldr	r3, [r4, #20]
 80008a6:	425b      	negs	r3, r3
 80008a8:	61a3      	str	r3, [r4, #24]
 80008aa:	6923      	ldr	r3, [r4, #16]
 80008ac:	b943      	cbnz	r3, 80008c0 <__swsetup_r+0xa8>
 80008ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008b2:	d1c4      	bne.n	800083e <__swsetup_r+0x26>
 80008b4:	bd38      	pop	{r3, r4, r5, pc}
 80008b6:	0781      	lsls	r1, r0, #30
 80008b8:	bf58      	it	pl
 80008ba:	6963      	ldrpl	r3, [r4, #20]
 80008bc:	60a3      	str	r3, [r4, #8]
 80008be:	e7f4      	b.n	80008aa <__swsetup_r+0x92>
 80008c0:	2000      	movs	r0, #0
 80008c2:	e7f7      	b.n	80008b4 <__swsetup_r+0x9c>
 80008c4:	20000058 	.word	0x20000058

080008c8 <memset>:
 80008c8:	4603      	mov	r3, r0
 80008ca:	4402      	add	r2, r0
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d100      	bne.n	80008d2 <memset+0xa>
 80008d0:	4770      	bx	lr
 80008d2:	f803 1b01 	strb.w	r1, [r3], #1
 80008d6:	e7f9      	b.n	80008cc <memset+0x4>

080008d8 <_close_r>:
 80008d8:	b538      	push	{r3, r4, r5, lr}
 80008da:	2300      	movs	r3, #0
 80008dc:	4d05      	ldr	r5, [pc, #20]	; (80008f4 <_close_r+0x1c>)
 80008de:	4604      	mov	r4, r0
 80008e0:	4608      	mov	r0, r1
 80008e2:	602b      	str	r3, [r5, #0]
 80008e4:	f7ff fcd9 	bl	800029a <_close>
 80008e8:	1c43      	adds	r3, r0, #1
 80008ea:	d102      	bne.n	80008f2 <_close_r+0x1a>
 80008ec:	682b      	ldr	r3, [r5, #0]
 80008ee:	b103      	cbz	r3, 80008f2 <_close_r+0x1a>
 80008f0:	6023      	str	r3, [r4, #0]
 80008f2:	bd38      	pop	{r3, r4, r5, pc}
 80008f4:	200001b8 	.word	0x200001b8

080008f8 <_lseek_r>:
 80008f8:	b538      	push	{r3, r4, r5, lr}
 80008fa:	4604      	mov	r4, r0
 80008fc:	4608      	mov	r0, r1
 80008fe:	4611      	mov	r1, r2
 8000900:	2200      	movs	r2, #0
 8000902:	4d05      	ldr	r5, [pc, #20]	; (8000918 <_lseek_r+0x20>)
 8000904:	602a      	str	r2, [r5, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	f7ff fceb 	bl	80002e2 <_lseek>
 800090c:	1c43      	adds	r3, r0, #1
 800090e:	d102      	bne.n	8000916 <_lseek_r+0x1e>
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	b103      	cbz	r3, 8000916 <_lseek_r+0x1e>
 8000914:	6023      	str	r3, [r4, #0]
 8000916:	bd38      	pop	{r3, r4, r5, pc}
 8000918:	200001b8 	.word	0x200001b8

0800091c <_read_r>:
 800091c:	b538      	push	{r3, r4, r5, lr}
 800091e:	4604      	mov	r4, r0
 8000920:	4608      	mov	r0, r1
 8000922:	4611      	mov	r1, r2
 8000924:	2200      	movs	r2, #0
 8000926:	4d05      	ldr	r5, [pc, #20]	; (800093c <_read_r+0x20>)
 8000928:	602a      	str	r2, [r5, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	f7ff fc7c 	bl	8000228 <_read>
 8000930:	1c43      	adds	r3, r0, #1
 8000932:	d102      	bne.n	800093a <_read_r+0x1e>
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	b103      	cbz	r3, 800093a <_read_r+0x1e>
 8000938:	6023      	str	r3, [r4, #0]
 800093a:	bd38      	pop	{r3, r4, r5, pc}
 800093c:	200001b8 	.word	0x200001b8

08000940 <_write_r>:
 8000940:	b538      	push	{r3, r4, r5, lr}
 8000942:	4604      	mov	r4, r0
 8000944:	4608      	mov	r0, r1
 8000946:	4611      	mov	r1, r2
 8000948:	2200      	movs	r2, #0
 800094a:	4d05      	ldr	r5, [pc, #20]	; (8000960 <_write_r+0x20>)
 800094c:	602a      	str	r2, [r5, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	f7ff fc87 	bl	8000262 <_write>
 8000954:	1c43      	adds	r3, r0, #1
 8000956:	d102      	bne.n	800095e <_write_r+0x1e>
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	b103      	cbz	r3, 800095e <_write_r+0x1e>
 800095c:	6023      	str	r3, [r4, #0]
 800095e:	bd38      	pop	{r3, r4, r5, pc}
 8000960:	200001b8 	.word	0x200001b8

08000964 <__errno>:
 8000964:	4b01      	ldr	r3, [pc, #4]	; (800096c <__errno+0x8>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000058 	.word	0x20000058

08000970 <__libc_init_array>:
 8000970:	b570      	push	{r4, r5, r6, lr}
 8000972:	2600      	movs	r6, #0
 8000974:	4d0c      	ldr	r5, [pc, #48]	; (80009a8 <__libc_init_array+0x38>)
 8000976:	4c0d      	ldr	r4, [pc, #52]	; (80009ac <__libc_init_array+0x3c>)
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	10a4      	asrs	r4, r4, #2
 800097c:	42a6      	cmp	r6, r4
 800097e:	d109      	bne.n	8000994 <__libc_init_array+0x24>
 8000980:	f000 fa50 	bl	8000e24 <_init>
 8000984:	2600      	movs	r6, #0
 8000986:	4d0a      	ldr	r5, [pc, #40]	; (80009b0 <__libc_init_array+0x40>)
 8000988:	4c0a      	ldr	r4, [pc, #40]	; (80009b4 <__libc_init_array+0x44>)
 800098a:	1b64      	subs	r4, r4, r5
 800098c:	10a4      	asrs	r4, r4, #2
 800098e:	42a6      	cmp	r6, r4
 8000990:	d105      	bne.n	800099e <__libc_init_array+0x2e>
 8000992:	bd70      	pop	{r4, r5, r6, pc}
 8000994:	f855 3b04 	ldr.w	r3, [r5], #4
 8000998:	4798      	blx	r3
 800099a:	3601      	adds	r6, #1
 800099c:	e7ee      	b.n	800097c <__libc_init_array+0xc>
 800099e:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a2:	4798      	blx	r3
 80009a4:	3601      	adds	r6, #1
 80009a6:	e7f2      	b.n	800098e <__libc_init_array+0x1e>
 80009a8:	08000e5c 	.word	0x08000e5c
 80009ac:	08000e5c 	.word	0x08000e5c
 80009b0:	08000e5c 	.word	0x08000e5c
 80009b4:	08000e60 	.word	0x08000e60

080009b8 <__retarget_lock_init_recursive>:
 80009b8:	4770      	bx	lr

080009ba <__retarget_lock_acquire_recursive>:
 80009ba:	4770      	bx	lr

080009bc <__retarget_lock_release_recursive>:
 80009bc:	4770      	bx	lr
	...

080009c0 <_free_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4605      	mov	r5, r0
 80009c4:	2900      	cmp	r1, #0
 80009c6:	d040      	beq.n	8000a4a <_free_r+0x8a>
 80009c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009cc:	1f0c      	subs	r4, r1, #4
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bfb8      	it	lt
 80009d2:	18e4      	addlt	r4, r4, r3
 80009d4:	f000 f8dc 	bl	8000b90 <__malloc_lock>
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <_free_r+0x8c>)
 80009da:	6813      	ldr	r3, [r2, #0]
 80009dc:	b933      	cbnz	r3, 80009ec <_free_r+0x2c>
 80009de:	6063      	str	r3, [r4, #4]
 80009e0:	6014      	str	r4, [r2, #0]
 80009e2:	4628      	mov	r0, r5
 80009e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009e8:	f000 b8d8 	b.w	8000b9c <__malloc_unlock>
 80009ec:	42a3      	cmp	r3, r4
 80009ee:	d908      	bls.n	8000a02 <_free_r+0x42>
 80009f0:	6820      	ldr	r0, [r4, #0]
 80009f2:	1821      	adds	r1, r4, r0
 80009f4:	428b      	cmp	r3, r1
 80009f6:	bf01      	itttt	eq
 80009f8:	6819      	ldreq	r1, [r3, #0]
 80009fa:	685b      	ldreq	r3, [r3, #4]
 80009fc:	1809      	addeq	r1, r1, r0
 80009fe:	6021      	streq	r1, [r4, #0]
 8000a00:	e7ed      	b.n	80009de <_free_r+0x1e>
 8000a02:	461a      	mov	r2, r3
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	b10b      	cbz	r3, 8000a0c <_free_r+0x4c>
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d9fa      	bls.n	8000a02 <_free_r+0x42>
 8000a0c:	6811      	ldr	r1, [r2, #0]
 8000a0e:	1850      	adds	r0, r2, r1
 8000a10:	42a0      	cmp	r0, r4
 8000a12:	d10b      	bne.n	8000a2c <_free_r+0x6c>
 8000a14:	6820      	ldr	r0, [r4, #0]
 8000a16:	4401      	add	r1, r0
 8000a18:	1850      	adds	r0, r2, r1
 8000a1a:	4283      	cmp	r3, r0
 8000a1c:	6011      	str	r1, [r2, #0]
 8000a1e:	d1e0      	bne.n	80009e2 <_free_r+0x22>
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4408      	add	r0, r1
 8000a26:	6010      	str	r0, [r2, #0]
 8000a28:	6053      	str	r3, [r2, #4]
 8000a2a:	e7da      	b.n	80009e2 <_free_r+0x22>
 8000a2c:	d902      	bls.n	8000a34 <_free_r+0x74>
 8000a2e:	230c      	movs	r3, #12
 8000a30:	602b      	str	r3, [r5, #0]
 8000a32:	e7d6      	b.n	80009e2 <_free_r+0x22>
 8000a34:	6820      	ldr	r0, [r4, #0]
 8000a36:	1821      	adds	r1, r4, r0
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	bf01      	itttt	eq
 8000a3c:	6819      	ldreq	r1, [r3, #0]
 8000a3e:	685b      	ldreq	r3, [r3, #4]
 8000a40:	1809      	addeq	r1, r1, r0
 8000a42:	6021      	streq	r1, [r4, #0]
 8000a44:	6063      	str	r3, [r4, #4]
 8000a46:	6054      	str	r4, [r2, #4]
 8000a48:	e7cb      	b.n	80009e2 <_free_r+0x22>
 8000a4a:	bd38      	pop	{r3, r4, r5, pc}
 8000a4c:	200001c0 	.word	0x200001c0

08000a50 <sbrk_aligned>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	4e0e      	ldr	r6, [pc, #56]	; (8000a8c <sbrk_aligned+0x3c>)
 8000a54:	460c      	mov	r4, r1
 8000a56:	6831      	ldr	r1, [r6, #0]
 8000a58:	4605      	mov	r5, r0
 8000a5a:	b911      	cbnz	r1, 8000a62 <sbrk_aligned+0x12>
 8000a5c:	f000 f9d2 	bl	8000e04 <_sbrk_r>
 8000a60:	6030      	str	r0, [r6, #0]
 8000a62:	4621      	mov	r1, r4
 8000a64:	4628      	mov	r0, r5
 8000a66:	f000 f9cd 	bl	8000e04 <_sbrk_r>
 8000a6a:	1c43      	adds	r3, r0, #1
 8000a6c:	d00a      	beq.n	8000a84 <sbrk_aligned+0x34>
 8000a6e:	1cc4      	adds	r4, r0, #3
 8000a70:	f024 0403 	bic.w	r4, r4, #3
 8000a74:	42a0      	cmp	r0, r4
 8000a76:	d007      	beq.n	8000a88 <sbrk_aligned+0x38>
 8000a78:	1a21      	subs	r1, r4, r0
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	f000 f9c2 	bl	8000e04 <_sbrk_r>
 8000a80:	3001      	adds	r0, #1
 8000a82:	d101      	bne.n	8000a88 <sbrk_aligned+0x38>
 8000a84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a88:	4620      	mov	r0, r4
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	200001c4 	.word	0x200001c4

08000a90 <_malloc_r>:
 8000a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a94:	1ccd      	adds	r5, r1, #3
 8000a96:	f025 0503 	bic.w	r5, r5, #3
 8000a9a:	3508      	adds	r5, #8
 8000a9c:	2d0c      	cmp	r5, #12
 8000a9e:	bf38      	it	cc
 8000aa0:	250c      	movcc	r5, #12
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	4607      	mov	r7, r0
 8000aa6:	db01      	blt.n	8000aac <_malloc_r+0x1c>
 8000aa8:	42a9      	cmp	r1, r5
 8000aaa:	d905      	bls.n	8000ab8 <_malloc_r+0x28>
 8000aac:	230c      	movs	r3, #12
 8000aae:	2600      	movs	r6, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ab8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b8c <_malloc_r+0xfc>
 8000abc:	f000 f868 	bl	8000b90 <__malloc_lock>
 8000ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	bb5c      	cbnz	r4, 8000b20 <_malloc_r+0x90>
 8000ac8:	4629      	mov	r1, r5
 8000aca:	4638      	mov	r0, r7
 8000acc:	f7ff ffc0 	bl	8000a50 <sbrk_aligned>
 8000ad0:	1c43      	adds	r3, r0, #1
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	d155      	bne.n	8000b82 <_malloc_r+0xf2>
 8000ad6:	f8d8 4000 	ldr.w	r4, [r8]
 8000ada:	4626      	mov	r6, r4
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d145      	bne.n	8000b6c <_malloc_r+0xdc>
 8000ae0:	2c00      	cmp	r4, #0
 8000ae2:	d048      	beq.n	8000b76 <_malloc_r+0xe6>
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	4631      	mov	r1, r6
 8000ae8:	4638      	mov	r0, r7
 8000aea:	eb04 0903 	add.w	r9, r4, r3
 8000aee:	f000 f989 	bl	8000e04 <_sbrk_r>
 8000af2:	4581      	cmp	r9, r0
 8000af4:	d13f      	bne.n	8000b76 <_malloc_r+0xe6>
 8000af6:	6821      	ldr	r1, [r4, #0]
 8000af8:	4638      	mov	r0, r7
 8000afa:	1a6d      	subs	r5, r5, r1
 8000afc:	4629      	mov	r1, r5
 8000afe:	f7ff ffa7 	bl	8000a50 <sbrk_aligned>
 8000b02:	3001      	adds	r0, #1
 8000b04:	d037      	beq.n	8000b76 <_malloc_r+0xe6>
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	442b      	add	r3, r5
 8000b0a:	6023      	str	r3, [r4, #0]
 8000b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d038      	beq.n	8000b86 <_malloc_r+0xf6>
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	42a2      	cmp	r2, r4
 8000b18:	d12b      	bne.n	8000b72 <_malloc_r+0xe2>
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	e00f      	b.n	8000b40 <_malloc_r+0xb0>
 8000b20:	6822      	ldr	r2, [r4, #0]
 8000b22:	1b52      	subs	r2, r2, r5
 8000b24:	d41f      	bmi.n	8000b66 <_malloc_r+0xd6>
 8000b26:	2a0b      	cmp	r2, #11
 8000b28:	d917      	bls.n	8000b5a <_malloc_r+0xca>
 8000b2a:	1961      	adds	r1, r4, r5
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	6025      	str	r5, [r4, #0]
 8000b30:	bf18      	it	ne
 8000b32:	6059      	strne	r1, [r3, #4]
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	bf08      	it	eq
 8000b38:	f8c8 1000 	streq.w	r1, [r8]
 8000b3c:	5162      	str	r2, [r4, r5]
 8000b3e:	604b      	str	r3, [r1, #4]
 8000b40:	4638      	mov	r0, r7
 8000b42:	f104 060b 	add.w	r6, r4, #11
 8000b46:	f000 f829 	bl	8000b9c <__malloc_unlock>
 8000b4a:	f026 0607 	bic.w	r6, r6, #7
 8000b4e:	1d23      	adds	r3, r4, #4
 8000b50:	1af2      	subs	r2, r6, r3
 8000b52:	d0ae      	beq.n	8000ab2 <_malloc_r+0x22>
 8000b54:	1b9b      	subs	r3, r3, r6
 8000b56:	50a3      	str	r3, [r4, r2]
 8000b58:	e7ab      	b.n	8000ab2 <_malloc_r+0x22>
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	6862      	ldr	r2, [r4, #4]
 8000b5e:	d1dd      	bne.n	8000b1c <_malloc_r+0x8c>
 8000b60:	f8c8 2000 	str.w	r2, [r8]
 8000b64:	e7ec      	b.n	8000b40 <_malloc_r+0xb0>
 8000b66:	4623      	mov	r3, r4
 8000b68:	6864      	ldr	r4, [r4, #4]
 8000b6a:	e7ac      	b.n	8000ac6 <_malloc_r+0x36>
 8000b6c:	4634      	mov	r4, r6
 8000b6e:	6876      	ldr	r6, [r6, #4]
 8000b70:	e7b4      	b.n	8000adc <_malloc_r+0x4c>
 8000b72:	4613      	mov	r3, r2
 8000b74:	e7cc      	b.n	8000b10 <_malloc_r+0x80>
 8000b76:	230c      	movs	r3, #12
 8000b78:	4638      	mov	r0, r7
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	f000 f80e 	bl	8000b9c <__malloc_unlock>
 8000b80:	e797      	b.n	8000ab2 <_malloc_r+0x22>
 8000b82:	6025      	str	r5, [r4, #0]
 8000b84:	e7dc      	b.n	8000b40 <_malloc_r+0xb0>
 8000b86:	605b      	str	r3, [r3, #4]
 8000b88:	deff      	udf	#255	; 0xff
 8000b8a:	bf00      	nop
 8000b8c:	200001c0 	.word	0x200001c0

08000b90 <__malloc_lock>:
 8000b90:	4801      	ldr	r0, [pc, #4]	; (8000b98 <__malloc_lock+0x8>)
 8000b92:	f7ff bf12 	b.w	80009ba <__retarget_lock_acquire_recursive>
 8000b96:	bf00      	nop
 8000b98:	200001bc 	.word	0x200001bc

08000b9c <__malloc_unlock>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	; (8000ba4 <__malloc_unlock+0x8>)
 8000b9e:	f7ff bf0d 	b.w	80009bc <__retarget_lock_release_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	200001bc 	.word	0x200001bc

08000ba8 <__sflush_r>:
 8000ba8:	898a      	ldrh	r2, [r1, #12]
 8000baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bac:	4605      	mov	r5, r0
 8000bae:	0710      	lsls	r0, r2, #28
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	d457      	bmi.n	8000c64 <__sflush_r+0xbc>
 8000bb4:	684b      	ldr	r3, [r1, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dc04      	bgt.n	8000bc4 <__sflush_r+0x1c>
 8000bba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dc01      	bgt.n	8000bc4 <__sflush_r+0x1c>
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0fa      	beq.n	8000bc0 <__sflush_r+0x18>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000bd0:	682f      	ldr	r7, [r5, #0]
 8000bd2:	6a21      	ldr	r1, [r4, #32]
 8000bd4:	602b      	str	r3, [r5, #0]
 8000bd6:	d032      	beq.n	8000c3e <__sflush_r+0x96>
 8000bd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bda:	89a3      	ldrh	r3, [r4, #12]
 8000bdc:	075a      	lsls	r2, r3, #29
 8000bde:	d505      	bpl.n	8000bec <__sflush_r+0x44>
 8000be0:	6863      	ldr	r3, [r4, #4]
 8000be2:	1ac0      	subs	r0, r0, r3
 8000be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000be6:	b10b      	cbz	r3, 8000bec <__sflush_r+0x44>
 8000be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bea:	1ac0      	subs	r0, r0, r3
 8000bec:	2300      	movs	r3, #0
 8000bee:	4602      	mov	r2, r0
 8000bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	6a21      	ldr	r1, [r4, #32]
 8000bf6:	47b0      	blx	r6
 8000bf8:	1c43      	adds	r3, r0, #1
 8000bfa:	89a3      	ldrh	r3, [r4, #12]
 8000bfc:	d106      	bne.n	8000c0c <__sflush_r+0x64>
 8000bfe:	6829      	ldr	r1, [r5, #0]
 8000c00:	291d      	cmp	r1, #29
 8000c02:	d82b      	bhi.n	8000c5c <__sflush_r+0xb4>
 8000c04:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <__sflush_r+0x100>)
 8000c06:	410a      	asrs	r2, r1
 8000c08:	07d6      	lsls	r6, r2, #31
 8000c0a:	d427      	bmi.n	8000c5c <__sflush_r+0xb4>
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6062      	str	r2, [r4, #4]
 8000c10:	6922      	ldr	r2, [r4, #16]
 8000c12:	04d9      	lsls	r1, r3, #19
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	d504      	bpl.n	8000c22 <__sflush_r+0x7a>
 8000c18:	1c42      	adds	r2, r0, #1
 8000c1a:	d101      	bne.n	8000c20 <__sflush_r+0x78>
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	b903      	cbnz	r3, 8000c22 <__sflush_r+0x7a>
 8000c20:	6560      	str	r0, [r4, #84]	; 0x54
 8000c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c24:	602f      	str	r7, [r5, #0]
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d0ca      	beq.n	8000bc0 <__sflush_r+0x18>
 8000c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d002      	beq.n	8000c38 <__sflush_r+0x90>
 8000c32:	4628      	mov	r0, r5
 8000c34:	f7ff fec4 	bl	80009c0 <_free_r>
 8000c38:	2000      	movs	r0, #0
 8000c3a:	6360      	str	r0, [r4, #52]	; 0x34
 8000c3c:	e7c1      	b.n	8000bc2 <__sflush_r+0x1a>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	4628      	mov	r0, r5
 8000c42:	47b0      	blx	r6
 8000c44:	1c41      	adds	r1, r0, #1
 8000c46:	d1c8      	bne.n	8000bda <__sflush_r+0x32>
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0c5      	beq.n	8000bda <__sflush_r+0x32>
 8000c4e:	2b1d      	cmp	r3, #29
 8000c50:	d001      	beq.n	8000c56 <__sflush_r+0xae>
 8000c52:	2b16      	cmp	r3, #22
 8000c54:	d101      	bne.n	8000c5a <__sflush_r+0xb2>
 8000c56:	602f      	str	r7, [r5, #0]
 8000c58:	e7b2      	b.n	8000bc0 <__sflush_r+0x18>
 8000c5a:	89a3      	ldrh	r3, [r4, #12]
 8000c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c60:	81a3      	strh	r3, [r4, #12]
 8000c62:	e7ae      	b.n	8000bc2 <__sflush_r+0x1a>
 8000c64:	690f      	ldr	r7, [r1, #16]
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d0aa      	beq.n	8000bc0 <__sflush_r+0x18>
 8000c6a:	0793      	lsls	r3, r2, #30
 8000c6c:	bf18      	it	ne
 8000c6e:	2300      	movne	r3, #0
 8000c70:	680e      	ldr	r6, [r1, #0]
 8000c72:	bf08      	it	eq
 8000c74:	694b      	ldreq	r3, [r1, #20]
 8000c76:	1bf6      	subs	r6, r6, r7
 8000c78:	600f      	str	r7, [r1, #0]
 8000c7a:	608b      	str	r3, [r1, #8]
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	dd9f      	ble.n	8000bc0 <__sflush_r+0x18>
 8000c80:	4633      	mov	r3, r6
 8000c82:	463a      	mov	r2, r7
 8000c84:	4628      	mov	r0, r5
 8000c86:	6a21      	ldr	r1, [r4, #32]
 8000c88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000c8c:	47e0      	blx	ip
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	dc06      	bgt.n	8000ca0 <__sflush_r+0xf8>
 8000c92:	89a3      	ldrh	r3, [r4, #12]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9c:	81a3      	strh	r3, [r4, #12]
 8000c9e:	e790      	b.n	8000bc2 <__sflush_r+0x1a>
 8000ca0:	4407      	add	r7, r0
 8000ca2:	1a36      	subs	r6, r6, r0
 8000ca4:	e7ea      	b.n	8000c7c <__sflush_r+0xd4>
 8000ca6:	bf00      	nop
 8000ca8:	dfbffffe 	.word	0xdfbffffe

08000cac <_fflush_r>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	690b      	ldr	r3, [r1, #16]
 8000cb0:	4605      	mov	r5, r0
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	b913      	cbnz	r3, 8000cbc <_fflush_r+0x10>
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	4628      	mov	r0, r5
 8000cba:	bd38      	pop	{r3, r4, r5, pc}
 8000cbc:	b118      	cbz	r0, 8000cc6 <_fflush_r+0x1a>
 8000cbe:	6a03      	ldr	r3, [r0, #32]
 8000cc0:	b90b      	cbnz	r3, 8000cc6 <_fflush_r+0x1a>
 8000cc2:	f7ff fc97 	bl	80005f4 <__sinit>
 8000cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f3      	beq.n	8000cb6 <_fflush_r+0xa>
 8000cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000cd0:	07d0      	lsls	r0, r2, #31
 8000cd2:	d404      	bmi.n	8000cde <_fflush_r+0x32>
 8000cd4:	0599      	lsls	r1, r3, #22
 8000cd6:	d402      	bmi.n	8000cde <_fflush_r+0x32>
 8000cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cda:	f7ff fe6e 	bl	80009ba <__retarget_lock_acquire_recursive>
 8000cde:	4628      	mov	r0, r5
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	f7ff ff61 	bl	8000ba8 <__sflush_r>
 8000ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ce8:	4605      	mov	r5, r0
 8000cea:	07da      	lsls	r2, r3, #31
 8000cec:	d4e4      	bmi.n	8000cb8 <_fflush_r+0xc>
 8000cee:	89a3      	ldrh	r3, [r4, #12]
 8000cf0:	059b      	lsls	r3, r3, #22
 8000cf2:	d4e1      	bmi.n	8000cb8 <_fflush_r+0xc>
 8000cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cf6:	f7ff fe61 	bl	80009bc <__retarget_lock_release_recursive>
 8000cfa:	e7dd      	b.n	8000cb8 <_fflush_r+0xc>

08000cfc <__swhatbuf_r>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	460c      	mov	r4, r1
 8000d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d04:	4615      	mov	r5, r2
 8000d06:	2900      	cmp	r1, #0
 8000d08:	461e      	mov	r6, r3
 8000d0a:	b096      	sub	sp, #88	; 0x58
 8000d0c:	da0c      	bge.n	8000d28 <__swhatbuf_r+0x2c>
 8000d0e:	89a3      	ldrh	r3, [r4, #12]
 8000d10:	2100      	movs	r1, #0
 8000d12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d16:	bf0c      	ite	eq
 8000d18:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000d1c:	2340      	movne	r3, #64	; 0x40
 8000d1e:	2000      	movs	r0, #0
 8000d20:	6031      	str	r1, [r6, #0]
 8000d22:	602b      	str	r3, [r5, #0]
 8000d24:	b016      	add	sp, #88	; 0x58
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	466a      	mov	r2, sp
 8000d2a:	f000 f849 	bl	8000dc0 <_fstat_r>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	dbed      	blt.n	8000d0e <__swhatbuf_r+0x12>
 8000d32:	9901      	ldr	r1, [sp, #4]
 8000d34:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000d38:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000d3c:	4259      	negs	r1, r3
 8000d3e:	4159      	adcs	r1, r3
 8000d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d44:	e7eb      	b.n	8000d1e <__swhatbuf_r+0x22>

08000d46 <__smakebuf_r>:
 8000d46:	898b      	ldrh	r3, [r1, #12]
 8000d48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d4a:	079d      	lsls	r5, r3, #30
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	460c      	mov	r4, r1
 8000d50:	d507      	bpl.n	8000d62 <__smakebuf_r+0x1c>
 8000d52:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d56:	6023      	str	r3, [r4, #0]
 8000d58:	6123      	str	r3, [r4, #16]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	6163      	str	r3, [r4, #20]
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd70      	pop	{r4, r5, r6, pc}
 8000d62:	466a      	mov	r2, sp
 8000d64:	ab01      	add	r3, sp, #4
 8000d66:	f7ff ffc9 	bl	8000cfc <__swhatbuf_r>
 8000d6a:	9900      	ldr	r1, [sp, #0]
 8000d6c:	4605      	mov	r5, r0
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f7ff fe8e 	bl	8000a90 <_malloc_r>
 8000d74:	b948      	cbnz	r0, 8000d8a <__smakebuf_r+0x44>
 8000d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d7a:	059a      	lsls	r2, r3, #22
 8000d7c:	d4ef      	bmi.n	8000d5e <__smakebuf_r+0x18>
 8000d7e:	f023 0303 	bic.w	r3, r3, #3
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	81a3      	strh	r3, [r4, #12]
 8000d88:	e7e3      	b.n	8000d52 <__smakebuf_r+0xc>
 8000d8a:	89a3      	ldrh	r3, [r4, #12]
 8000d8c:	6020      	str	r0, [r4, #0]
 8000d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d92:	81a3      	strh	r3, [r4, #12]
 8000d94:	9b00      	ldr	r3, [sp, #0]
 8000d96:	6120      	str	r0, [r4, #16]
 8000d98:	6163      	str	r3, [r4, #20]
 8000d9a:	9b01      	ldr	r3, [sp, #4]
 8000d9c:	b15b      	cbz	r3, 8000db6 <__smakebuf_r+0x70>
 8000d9e:	4630      	mov	r0, r6
 8000da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000da4:	f000 f81e 	bl	8000de4 <_isatty_r>
 8000da8:	b128      	cbz	r0, 8000db6 <__smakebuf_r+0x70>
 8000daa:	89a3      	ldrh	r3, [r4, #12]
 8000dac:	f023 0303 	bic.w	r3, r3, #3
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	81a3      	strh	r3, [r4, #12]
 8000db6:	89a3      	ldrh	r3, [r4, #12]
 8000db8:	431d      	orrs	r5, r3
 8000dba:	81a5      	strh	r5, [r4, #12]
 8000dbc:	e7cf      	b.n	8000d5e <__smakebuf_r+0x18>
	...

08000dc0 <_fstat_r>:
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	4d06      	ldr	r5, [pc, #24]	; (8000de0 <_fstat_r+0x20>)
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	4608      	mov	r0, r1
 8000dca:	4611      	mov	r1, r2
 8000dcc:	602b      	str	r3, [r5, #0]
 8000dce:	f7ff fa6f 	bl	80002b0 <_fstat>
 8000dd2:	1c43      	adds	r3, r0, #1
 8000dd4:	d102      	bne.n	8000ddc <_fstat_r+0x1c>
 8000dd6:	682b      	ldr	r3, [r5, #0]
 8000dd8:	b103      	cbz	r3, 8000ddc <_fstat_r+0x1c>
 8000dda:	6023      	str	r3, [r4, #0]
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop
 8000de0:	200001b8 	.word	0x200001b8

08000de4 <_isatty_r>:
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	2300      	movs	r3, #0
 8000de8:	4d05      	ldr	r5, [pc, #20]	; (8000e00 <_isatty_r+0x1c>)
 8000dea:	4604      	mov	r4, r0
 8000dec:	4608      	mov	r0, r1
 8000dee:	602b      	str	r3, [r5, #0]
 8000df0:	f7ff fa6d 	bl	80002ce <_isatty>
 8000df4:	1c43      	adds	r3, r0, #1
 8000df6:	d102      	bne.n	8000dfe <_isatty_r+0x1a>
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	b103      	cbz	r3, 8000dfe <_isatty_r+0x1a>
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	200001b8 	.word	0x200001b8

08000e04 <_sbrk_r>:
 8000e04:	b538      	push	{r3, r4, r5, lr}
 8000e06:	2300      	movs	r3, #0
 8000e08:	4d05      	ldr	r5, [pc, #20]	; (8000e20 <_sbrk_r+0x1c>)
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	602b      	str	r3, [r5, #0]
 8000e10:	f7ff fa74 	bl	80002fc <_sbrk>
 8000e14:	1c43      	adds	r3, r0, #1
 8000e16:	d102      	bne.n	8000e1e <_sbrk_r+0x1a>
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	b103      	cbz	r3, 8000e1e <_sbrk_r+0x1a>
 8000e1c:	6023      	str	r3, [r4, #0]
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	200001b8 	.word	0x200001b8

08000e24 <_init>:
 8000e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e26:	bf00      	nop
 8000e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e2a:	bc08      	pop	{r3}
 8000e2c:	469e      	mov	lr, r3
 8000e2e:	4770      	bx	lr

08000e30 <_fini>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	bf00      	nop
 8000e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e36:	bc08      	pop	{r3}
 8000e38:	469e      	mov	lr, r3
 8000e3a:	4770      	bx	lr
