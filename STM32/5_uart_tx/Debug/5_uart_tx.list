
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000124  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  08000124  08000124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000424  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000424  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001044d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003ac  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a6  00000000  00000000  0001083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  000109e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000051  00000000  00000000  00010a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000d619  00000000  00000000  00010ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000060d  00000000  00000000  0001e0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004a9b3  00000000  00000000  0001e6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000130  00000000  00000000  0006908c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000691bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000124 <__do_global_dtors_aux>:
 8000124:	b510      	push	{r4, lr}
 8000126:	4c05      	ldr	r4, [pc, #20]	; (800013c <__do_global_dtors_aux+0x18>)
 8000128:	7823      	ldrb	r3, [r4, #0]
 800012a:	b933      	cbnz	r3, 800013a <__do_global_dtors_aux+0x16>
 800012c:	4b04      	ldr	r3, [pc, #16]	; (8000140 <__do_global_dtors_aux+0x1c>)
 800012e:	b113      	cbz	r3, 8000136 <__do_global_dtors_aux+0x12>
 8000130:	4804      	ldr	r0, [pc, #16]	; (8000144 <__do_global_dtors_aux+0x20>)
 8000132:	f3af 8000 	nop.w
 8000136:	2301      	movs	r3, #1
 8000138:	7023      	strb	r3, [r4, #0]
 800013a:	bd10      	pop	{r4, pc}
 800013c:	20000000 	.word	0x20000000
 8000140:	00000000 	.word	0x00000000
 8000144:	08000404 	.word	0x08000404

08000148 <frame_dummy>:
 8000148:	b508      	push	{r3, lr}
 800014a:	4b03      	ldr	r3, [pc, #12]	; (8000158 <frame_dummy+0x10>)
 800014c:	b11b      	cbz	r3, 8000156 <frame_dummy+0xe>
 800014e:	4903      	ldr	r1, [pc, #12]	; (800015c <frame_dummy+0x14>)
 8000150:	4803      	ldr	r0, [pc, #12]	; (8000160 <frame_dummy+0x18>)
 8000152:	f3af 8000 	nop.w
 8000156:	bd08      	pop	{r3, pc}
 8000158:	00000000 	.word	0x00000000
 800015c:	20000004 	.word	0x20000004
 8000160:	08000404 	.word	0x08000404

08000164 <main>:
void clock_step_up_to_4M();
void uart2_tx_init();
void uart2_write(int ch);

int main(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
	clock_step_up_to_16M();
 800016a:	f000 f849 	bl	8000200 <clock_step_up_to_16M>

	RCC->AHBENR |= GPIOAEN;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <main+0x5c>)
 8000170:	69db      	ldr	r3, [r3, #28]
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <main+0x5c>)
 8000174:	f043 0301 	orr.w	r3, r3, #1
 8000178:	61d3      	str	r3, [r2, #28]
	GPIOA->MODER |= (1U<<10);
 800017a:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <main+0x60>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4a11      	ldr	r2, [pc, #68]	; (80001c4 <main+0x60>)
 8000180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000184:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <main+0x60>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <main+0x60>)
 800018c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000190:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 8000192:	f000 f865 	bl	8000260 <uart2_tx_init>
	while(1)
	{
		uart2_write('y');
 8000196:	2079      	movs	r0, #121	; 0x79
 8000198:	f000 f8ae 	bl	80002f8 <uart2_write>
		GPIOA->ODR ^= LED_PIN;
 800019c:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <main+0x60>)
 800019e:	695b      	ldr	r3, [r3, #20]
 80001a0:	4a08      	ldr	r2, [pc, #32]	; (80001c4 <main+0x60>)
 80001a2:	f083 0320 	eor.w	r3, r3, #32
 80001a6:	6153      	str	r3, [r2, #20]
		for(int i = 0; i < 100000; i++){
 80001a8:	2300      	movs	r3, #0
 80001aa:	607b      	str	r3, [r7, #4]
 80001ac:	e002      	b.n	80001b4 <main+0x50>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	3301      	adds	r3, #1
 80001b2:	607b      	str	r3, [r7, #4]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <main+0x64>)
 80001b8:	4293      	cmp	r3, r2
 80001ba:	ddf8      	ble.n	80001ae <main+0x4a>
		uart2_write('y');
 80001bc:	e7eb      	b.n	8000196 <main+0x32>
 80001be:	bf00      	nop
 80001c0:	40023800 	.word	0x40023800
 80001c4:	40020000 	.word	0x40020000
 80001c8:	0001869f 	.word	0x0001869f

080001cc <clock_step_up_to_4M>:
	}
}


void clock_step_up_to_4M()
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	RCC->ICSCR |= (1U<<15);
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <clock_step_up_to_4M+0x30>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <clock_step_up_to_4M+0x30>)
 80001d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001da:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= (1U<<14);
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <clock_step_up_to_4M+0x30>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <clock_step_up_to_4M+0x30>)
 80001e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80001e6:	6053      	str	r3, [r2, #4]
	RCC->ICSCR &= ~(1U<<13);
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <clock_step_up_to_4M+0x30>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <clock_step_up_to_4M+0x30>)
 80001ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001f2:	6053      	str	r3, [r2, #4]
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	40023800 	.word	0x40023800

08000200 <clock_step_up_to_16M>:

void clock_step_up_to_16M()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	clock_step_up_to_4M();
 8000206:	f7ff ffe1 	bl	80001cc <clock_step_up_to_4M>
	for(int i = 0; i<10000; i++){}
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <clock_step_up_to_16M+0x16>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f242 720f 	movw	r2, #9999	; 0x270f
 800021c:	4293      	cmp	r3, r2
 800021e:	ddf7      	ble.n	8000210 <clock_step_up_to_16M+0x10>

	RCC->CR |= (1U<<0);
 8000220:	4b0e      	ldr	r3, [pc, #56]	; (800025c <clock_step_up_to_16M+0x5c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0d      	ldr	r2, [pc, #52]	; (800025c <clock_step_up_to_16M+0x5c>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1U<<1))){}
 800022c:	bf00      	nop
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <clock_step_up_to_16M+0x5c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f003 0302 	and.w	r3, r3, #2
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <clock_step_up_to_16M+0x2e>

	RCC->CFGR &= ~(1U<<1);
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <clock_step_up_to_16M+0x5c>)
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	4a07      	ldr	r2, [pc, #28]	; (800025c <clock_step_up_to_16M+0x5c>)
 8000240:	f023 0302 	bic.w	r3, r3, #2
 8000244:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (1U<<0);
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <clock_step_up_to_16M+0x5c>)
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	4a04      	ldr	r2, [pc, #16]	; (800025c <clock_step_up_to_16M+0x5c>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6093      	str	r3, [r2, #8]
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800

08000260 <uart2_tx_init>:

void uart2_tx_init()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	/********* Configure uart GPIO tx pin *********/
	/* Enable clock access to GPIOA */
	RCC->AHBENR |= GPIOAEN;
 8000264:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <uart2_tx_init+0x88>)
 8000266:	69db      	ldr	r3, [r3, #28]
 8000268:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <uart2_tx_init+0x88>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	61d3      	str	r3, [r2, #28]

	/* Set PA2 mode to alternate function mode */
	GPIOA->MODER &= ~(1U<<4);
 8000270:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <uart2_tx_init+0x8c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1d      	ldr	r2, [pc, #116]	; (80002ec <uart2_tx_init+0x8c>)
 8000276:	f023 0310 	bic.w	r3, r3, #16
 800027a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <uart2_tx_init+0x8c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <uart2_tx_init+0x8c>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6013      	str	r3, [r2, #0]

	/* Set PA2 alternate function type to UART_TX (AF07) */
	GPIOA->AFR[0] |= (1U<<8);
 8000288:	4b18      	ldr	r3, [pc, #96]	; (80002ec <uart2_tx_init+0x8c>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a17      	ldr	r2, [pc, #92]	; (80002ec <uart2_tx_init+0x8c>)
 800028e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000292:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <uart2_tx_init+0x8c>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a14      	ldr	r2, [pc, #80]	; (80002ec <uart2_tx_init+0x8c>)
 800029a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800029e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <uart2_tx_init+0x8c>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <uart2_tx_init+0x8c>)
 80002a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <uart2_tx_init+0x8c>)
 80002ae:	6a1b      	ldr	r3, [r3, #32]
 80002b0:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <uart2_tx_init+0x8c>)
 80002b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002b6:	6213      	str	r3, [r2, #32]

	/********* Configure uart module *********/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <uart2_tx_init+0x88>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <uart2_tx_init+0x88>)
 80002be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c2:	6253      	str	r3, [r2, #36]	; 0x24

	/* Configure UART baud rate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c8:	4909      	ldr	r1, [pc, #36]	; (80002f0 <uart2_tx_init+0x90>)
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <uart2_tx_init+0x94>)
 80002cc:	f000 f82a 	bl	8000324 <uart_set_baudrate>

	/* Configure transfer direction */
	USART2->CR1 = CR1_TE;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <uart2_tx_init+0x94>)
 80002d2:	2208      	movs	r2, #8
 80002d4:	60da      	str	r2, [r3, #12]

	/* Enable uart module */
	USART2->CR1 |= CR1_UE;
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <uart2_tx_init+0x94>)
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	4a06      	ldr	r2, [pc, #24]	; (80002f4 <uart2_tx_init+0x94>)
 80002dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002e0:	60d3      	str	r3, [r2, #12]
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020000 	.word	0x40020000
 80002f0:	00f42400 	.word	0x00f42400
 80002f4:	40004400 	.word	0x40004400

080002f8 <uart2_write>:

void uart2_write(int ch)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	/* Make sure TX data register is empty */
	while(!(USART2->SR & SR_TXE)){}
 8000300:	bf00      	nop
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <uart2_write+0x28>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <uart2_write+0xa>
	/* Write to TX data register */

	USART2->DR	= (ch & 0xFF);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a03      	ldr	r2, [pc, #12]	; (8000320 <uart2_write+0x28>)
 8000312:	b2db      	uxtb	r3, r3
 8000314:	6053      	str	r3, [r2, #4]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40004400 	.word	0x40004400

08000324 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t baudRate)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, baudRate);
 8000330:	6879      	ldr	r1, [r7, #4]
 8000332:	68b8      	ldr	r0, [r7, #8]
 8000334:	f000 f808 	bl	8000348 <compute_uart_bd>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	609a      	str	r2, [r3, #8]
}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t baudRate)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
	return PeriphClk / baudRate;
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	fbb2 f3f3 	udiv	r3, r2, r3
 800035a:	b29b      	uxth	r3, r3
}
 800035c:	4618      	mov	r0, r3
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
	...

08000368 <Reset_Handler>:
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
 800036a:	4685      	mov	sp, r0
 800036c:	f3af 8000 	nop.w
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LoopForever+0x6>)
 8000372:	490d      	ldr	r1, [pc, #52]	; (80003a8 <LoopForever+0xa>)
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <LoopForever+0xe>)
 8000376:	2300      	movs	r3, #0
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:
 800037a:	58d4      	ldr	r4, [r2, r3]
 800037c:	50c4      	str	r4, [r0, r3]
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:
 8000380:	18c4      	adds	r4, r0, r3
 8000382:	428c      	cmp	r4, r1
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <LoopForever+0x12>)
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <LoopForever+0x16>)
 800038a:	2300      	movs	r3, #0
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:
 800038e:	6013      	str	r3, [r2, #0]
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:
 8000392:	42a2      	cmp	r2, r4
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
 800039a:	f7ff fee3 	bl	8000164 <main>

0800039e <LoopForever>:
 800039e:	e7fe      	b.n	800039e <LoopForever>
 80003a0:	20014000 	.word	0x20014000
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000000 	.word	0x20000000
 80003ac:	08000424 	.word	0x08000424
 80003b0:	20000000 	.word	0x20000000
 80003b4:	2000001c 	.word	0x2000001c

080003b8 <ADC1_IRQHandler>:
 80003b8:	e7fe      	b.n	80003b8 <ADC1_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	2600      	movs	r6, #0
 80003c0:	4d0c      	ldr	r5, [pc, #48]	; (80003f4 <__libc_init_array+0x38>)
 80003c2:	4c0d      	ldr	r4, [pc, #52]	; (80003f8 <__libc_init_array+0x3c>)
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	f000 f81a 	bl	8000404 <_init>
 80003d0:	2600      	movs	r6, #0
 80003d2:	4d0a      	ldr	r5, [pc, #40]	; (80003fc <__libc_init_array+0x40>)
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <__libc_init_array+0x44>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
